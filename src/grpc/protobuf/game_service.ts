// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: game_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "pb";

export interface SolveSudokuRequest {
  line1: number[];
  line2: number[];
  line3: number[];
  line4: number[];
  line5: number[];
  line6: number[];
  line7: number[];
  line8: number[];
  line9: number[];
}

export interface SolveSudokuResponse {
  line1: number[];
  line2: number[];
  line3: number[];
  line4: number[];
  line5: number[];
  line6: number[];
  line7: number[];
  line8: number[];
  line9: number[];
}

export interface GenerateSudokuRequest {
  hide: number;
}

export interface GenerateSudokuResponse {
  line1: number[];
  line2: number[];
  line3: number[];
  line4: number[];
  line5: number[];
  line6: number[];
  line7: number[];
  line8: number[];
  line9: number[];
}

export interface CheckSudokuSolvableRequest {
  line1: number[];
  line2: number[];
  line3: number[];
  line4: number[];
  line5: number[];
  line6: number[];
  line7: number[];
  line8: number[];
  line9: number[];
}

export interface CheckSudokuSolvableResponse {
  solvable: boolean;
}

function createBaseSolveSudokuRequest(): SolveSudokuRequest {
  return { line1: [], line2: [], line3: [], line4: [], line5: [], line6: [], line7: [], line8: [], line9: [] };
}

export const SolveSudokuRequest: MessageFns<SolveSudokuRequest> = {
  encode(message: SolveSudokuRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.line1) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.line2) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.line3) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.line4) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.line5) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.line6) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.line7) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.line8) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.line9) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolveSudokuRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolveSudokuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.line1.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line1.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.line2.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line2.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.line3.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line3.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.line4.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line4.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.line5.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line5.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.line6.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line6.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 56) {
            message.line7.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line7.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.line8.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line8.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.line9.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line9.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolveSudokuRequest {
    return {
      line1: globalThis.Array.isArray(object?.line1) ? object.line1.map((e: any) => globalThis.Number(e)) : [],
      line2: globalThis.Array.isArray(object?.line2) ? object.line2.map((e: any) => globalThis.Number(e)) : [],
      line3: globalThis.Array.isArray(object?.line3) ? object.line3.map((e: any) => globalThis.Number(e)) : [],
      line4: globalThis.Array.isArray(object?.line4) ? object.line4.map((e: any) => globalThis.Number(e)) : [],
      line5: globalThis.Array.isArray(object?.line5) ? object.line5.map((e: any) => globalThis.Number(e)) : [],
      line6: globalThis.Array.isArray(object?.line6) ? object.line6.map((e: any) => globalThis.Number(e)) : [],
      line7: globalThis.Array.isArray(object?.line7) ? object.line7.map((e: any) => globalThis.Number(e)) : [],
      line8: globalThis.Array.isArray(object?.line8) ? object.line8.map((e: any) => globalThis.Number(e)) : [],
      line9: globalThis.Array.isArray(object?.line9) ? object.line9.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: SolveSudokuRequest): unknown {
    const obj: any = {};
    if (message.line1?.length) {
      obj.line1 = message.line1.map((e) => Math.round(e));
    }
    if (message.line2?.length) {
      obj.line2 = message.line2.map((e) => Math.round(e));
    }
    if (message.line3?.length) {
      obj.line3 = message.line3.map((e) => Math.round(e));
    }
    if (message.line4?.length) {
      obj.line4 = message.line4.map((e) => Math.round(e));
    }
    if (message.line5?.length) {
      obj.line5 = message.line5.map((e) => Math.round(e));
    }
    if (message.line6?.length) {
      obj.line6 = message.line6.map((e) => Math.round(e));
    }
    if (message.line7?.length) {
      obj.line7 = message.line7.map((e) => Math.round(e));
    }
    if (message.line8?.length) {
      obj.line8 = message.line8.map((e) => Math.round(e));
    }
    if (message.line9?.length) {
      obj.line9 = message.line9.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolveSudokuRequest>, I>>(base?: I): SolveSudokuRequest {
    return SolveSudokuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolveSudokuRequest>, I>>(object: I): SolveSudokuRequest {
    const message = createBaseSolveSudokuRequest();
    message.line1 = object.line1?.map((e) => e) || [];
    message.line2 = object.line2?.map((e) => e) || [];
    message.line3 = object.line3?.map((e) => e) || [];
    message.line4 = object.line4?.map((e) => e) || [];
    message.line5 = object.line5?.map((e) => e) || [];
    message.line6 = object.line6?.map((e) => e) || [];
    message.line7 = object.line7?.map((e) => e) || [];
    message.line8 = object.line8?.map((e) => e) || [];
    message.line9 = object.line9?.map((e) => e) || [];
    return message;
  },
};

function createBaseSolveSudokuResponse(): SolveSudokuResponse {
  return { line1: [], line2: [], line3: [], line4: [], line5: [], line6: [], line7: [], line8: [], line9: [] };
}

export const SolveSudokuResponse: MessageFns<SolveSudokuResponse> = {
  encode(message: SolveSudokuResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.line1) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.line2) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.line3) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.line4) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.line5) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.line6) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.line7) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.line8) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.line9) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolveSudokuResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolveSudokuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.line1.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line1.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.line2.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line2.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.line3.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line3.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.line4.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line4.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.line5.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line5.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.line6.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line6.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 56) {
            message.line7.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line7.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.line8.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line8.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.line9.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line9.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolveSudokuResponse {
    return {
      line1: globalThis.Array.isArray(object?.line1) ? object.line1.map((e: any) => globalThis.Number(e)) : [],
      line2: globalThis.Array.isArray(object?.line2) ? object.line2.map((e: any) => globalThis.Number(e)) : [],
      line3: globalThis.Array.isArray(object?.line3) ? object.line3.map((e: any) => globalThis.Number(e)) : [],
      line4: globalThis.Array.isArray(object?.line4) ? object.line4.map((e: any) => globalThis.Number(e)) : [],
      line5: globalThis.Array.isArray(object?.line5) ? object.line5.map((e: any) => globalThis.Number(e)) : [],
      line6: globalThis.Array.isArray(object?.line6) ? object.line6.map((e: any) => globalThis.Number(e)) : [],
      line7: globalThis.Array.isArray(object?.line7) ? object.line7.map((e: any) => globalThis.Number(e)) : [],
      line8: globalThis.Array.isArray(object?.line8) ? object.line8.map((e: any) => globalThis.Number(e)) : [],
      line9: globalThis.Array.isArray(object?.line9) ? object.line9.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: SolveSudokuResponse): unknown {
    const obj: any = {};
    if (message.line1?.length) {
      obj.line1 = message.line1.map((e) => Math.round(e));
    }
    if (message.line2?.length) {
      obj.line2 = message.line2.map((e) => Math.round(e));
    }
    if (message.line3?.length) {
      obj.line3 = message.line3.map((e) => Math.round(e));
    }
    if (message.line4?.length) {
      obj.line4 = message.line4.map((e) => Math.round(e));
    }
    if (message.line5?.length) {
      obj.line5 = message.line5.map((e) => Math.round(e));
    }
    if (message.line6?.length) {
      obj.line6 = message.line6.map((e) => Math.round(e));
    }
    if (message.line7?.length) {
      obj.line7 = message.line7.map((e) => Math.round(e));
    }
    if (message.line8?.length) {
      obj.line8 = message.line8.map((e) => Math.round(e));
    }
    if (message.line9?.length) {
      obj.line9 = message.line9.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolveSudokuResponse>, I>>(base?: I): SolveSudokuResponse {
    return SolveSudokuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolveSudokuResponse>, I>>(object: I): SolveSudokuResponse {
    const message = createBaseSolveSudokuResponse();
    message.line1 = object.line1?.map((e) => e) || [];
    message.line2 = object.line2?.map((e) => e) || [];
    message.line3 = object.line3?.map((e) => e) || [];
    message.line4 = object.line4?.map((e) => e) || [];
    message.line5 = object.line5?.map((e) => e) || [];
    message.line6 = object.line6?.map((e) => e) || [];
    message.line7 = object.line7?.map((e) => e) || [];
    message.line8 = object.line8?.map((e) => e) || [];
    message.line9 = object.line9?.map((e) => e) || [];
    return message;
  },
};

function createBaseGenerateSudokuRequest(): GenerateSudokuRequest {
  return { hide: 0 };
}

export const GenerateSudokuRequest: MessageFns<GenerateSudokuRequest> = {
  encode(message: GenerateSudokuRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hide !== 0) {
      writer.uint32(8).uint32(message.hide);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateSudokuRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateSudokuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hide = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateSudokuRequest {
    return { hide: isSet(object.hide) ? globalThis.Number(object.hide) : 0 };
  },

  toJSON(message: GenerateSudokuRequest): unknown {
    const obj: any = {};
    if (message.hide !== 0) {
      obj.hide = Math.round(message.hide);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateSudokuRequest>, I>>(base?: I): GenerateSudokuRequest {
    return GenerateSudokuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateSudokuRequest>, I>>(object: I): GenerateSudokuRequest {
    const message = createBaseGenerateSudokuRequest();
    message.hide = object.hide ?? 0;
    return message;
  },
};

function createBaseGenerateSudokuResponse(): GenerateSudokuResponse {
  return { line1: [], line2: [], line3: [], line4: [], line5: [], line6: [], line7: [], line8: [], line9: [] };
}

export const GenerateSudokuResponse: MessageFns<GenerateSudokuResponse> = {
  encode(message: GenerateSudokuResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.line1) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.line2) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.line3) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.line4) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.line5) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.line6) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.line7) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.line8) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.line9) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateSudokuResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateSudokuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.line1.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line1.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.line2.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line2.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.line3.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line3.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.line4.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line4.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.line5.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line5.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.line6.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line6.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 56) {
            message.line7.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line7.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.line8.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line8.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.line9.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line9.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateSudokuResponse {
    return {
      line1: globalThis.Array.isArray(object?.line1) ? object.line1.map((e: any) => globalThis.Number(e)) : [],
      line2: globalThis.Array.isArray(object?.line2) ? object.line2.map((e: any) => globalThis.Number(e)) : [],
      line3: globalThis.Array.isArray(object?.line3) ? object.line3.map((e: any) => globalThis.Number(e)) : [],
      line4: globalThis.Array.isArray(object?.line4) ? object.line4.map((e: any) => globalThis.Number(e)) : [],
      line5: globalThis.Array.isArray(object?.line5) ? object.line5.map((e: any) => globalThis.Number(e)) : [],
      line6: globalThis.Array.isArray(object?.line6) ? object.line6.map((e: any) => globalThis.Number(e)) : [],
      line7: globalThis.Array.isArray(object?.line7) ? object.line7.map((e: any) => globalThis.Number(e)) : [],
      line8: globalThis.Array.isArray(object?.line8) ? object.line8.map((e: any) => globalThis.Number(e)) : [],
      line9: globalThis.Array.isArray(object?.line9) ? object.line9.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: GenerateSudokuResponse): unknown {
    const obj: any = {};
    if (message.line1?.length) {
      obj.line1 = message.line1.map((e) => Math.round(e));
    }
    if (message.line2?.length) {
      obj.line2 = message.line2.map((e) => Math.round(e));
    }
    if (message.line3?.length) {
      obj.line3 = message.line3.map((e) => Math.round(e));
    }
    if (message.line4?.length) {
      obj.line4 = message.line4.map((e) => Math.round(e));
    }
    if (message.line5?.length) {
      obj.line5 = message.line5.map((e) => Math.round(e));
    }
    if (message.line6?.length) {
      obj.line6 = message.line6.map((e) => Math.round(e));
    }
    if (message.line7?.length) {
      obj.line7 = message.line7.map((e) => Math.round(e));
    }
    if (message.line8?.length) {
      obj.line8 = message.line8.map((e) => Math.round(e));
    }
    if (message.line9?.length) {
      obj.line9 = message.line9.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateSudokuResponse>, I>>(base?: I): GenerateSudokuResponse {
    return GenerateSudokuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateSudokuResponse>, I>>(object: I): GenerateSudokuResponse {
    const message = createBaseGenerateSudokuResponse();
    message.line1 = object.line1?.map((e) => e) || [];
    message.line2 = object.line2?.map((e) => e) || [];
    message.line3 = object.line3?.map((e) => e) || [];
    message.line4 = object.line4?.map((e) => e) || [];
    message.line5 = object.line5?.map((e) => e) || [];
    message.line6 = object.line6?.map((e) => e) || [];
    message.line7 = object.line7?.map((e) => e) || [];
    message.line8 = object.line8?.map((e) => e) || [];
    message.line9 = object.line9?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckSudokuSolvableRequest(): CheckSudokuSolvableRequest {
  return { line1: [], line2: [], line3: [], line4: [], line5: [], line6: [], line7: [], line8: [], line9: [] };
}

export const CheckSudokuSolvableRequest: MessageFns<CheckSudokuSolvableRequest> = {
  encode(message: CheckSudokuSolvableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.line1) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.line2) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.line3) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.line4) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.line5) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.line6) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.line7) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.line8) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.line9) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckSudokuSolvableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckSudokuSolvableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.line1.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line1.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.line2.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line2.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.line3.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line3.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag === 32) {
            message.line4.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line4.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag === 40) {
            message.line5.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line5.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag === 48) {
            message.line6.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line6.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag === 56) {
            message.line7.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line7.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag === 64) {
            message.line8.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line8.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            message.line9.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.line9.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckSudokuSolvableRequest {
    return {
      line1: globalThis.Array.isArray(object?.line1) ? object.line1.map((e: any) => globalThis.Number(e)) : [],
      line2: globalThis.Array.isArray(object?.line2) ? object.line2.map((e: any) => globalThis.Number(e)) : [],
      line3: globalThis.Array.isArray(object?.line3) ? object.line3.map((e: any) => globalThis.Number(e)) : [],
      line4: globalThis.Array.isArray(object?.line4) ? object.line4.map((e: any) => globalThis.Number(e)) : [],
      line5: globalThis.Array.isArray(object?.line5) ? object.line5.map((e: any) => globalThis.Number(e)) : [],
      line6: globalThis.Array.isArray(object?.line6) ? object.line6.map((e: any) => globalThis.Number(e)) : [],
      line7: globalThis.Array.isArray(object?.line7) ? object.line7.map((e: any) => globalThis.Number(e)) : [],
      line8: globalThis.Array.isArray(object?.line8) ? object.line8.map((e: any) => globalThis.Number(e)) : [],
      line9: globalThis.Array.isArray(object?.line9) ? object.line9.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: CheckSudokuSolvableRequest): unknown {
    const obj: any = {};
    if (message.line1?.length) {
      obj.line1 = message.line1.map((e) => Math.round(e));
    }
    if (message.line2?.length) {
      obj.line2 = message.line2.map((e) => Math.round(e));
    }
    if (message.line3?.length) {
      obj.line3 = message.line3.map((e) => Math.round(e));
    }
    if (message.line4?.length) {
      obj.line4 = message.line4.map((e) => Math.round(e));
    }
    if (message.line5?.length) {
      obj.line5 = message.line5.map((e) => Math.round(e));
    }
    if (message.line6?.length) {
      obj.line6 = message.line6.map((e) => Math.round(e));
    }
    if (message.line7?.length) {
      obj.line7 = message.line7.map((e) => Math.round(e));
    }
    if (message.line8?.length) {
      obj.line8 = message.line8.map((e) => Math.round(e));
    }
    if (message.line9?.length) {
      obj.line9 = message.line9.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckSudokuSolvableRequest>, I>>(base?: I): CheckSudokuSolvableRequest {
    return CheckSudokuSolvableRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckSudokuSolvableRequest>, I>>(object: I): CheckSudokuSolvableRequest {
    const message = createBaseCheckSudokuSolvableRequest();
    message.line1 = object.line1?.map((e) => e) || [];
    message.line2 = object.line2?.map((e) => e) || [];
    message.line3 = object.line3?.map((e) => e) || [];
    message.line4 = object.line4?.map((e) => e) || [];
    message.line5 = object.line5?.map((e) => e) || [];
    message.line6 = object.line6?.map((e) => e) || [];
    message.line7 = object.line7?.map((e) => e) || [];
    message.line8 = object.line8?.map((e) => e) || [];
    message.line9 = object.line9?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckSudokuSolvableResponse(): CheckSudokuSolvableResponse {
  return { solvable: false };
}

export const CheckSudokuSolvableResponse: MessageFns<CheckSudokuSolvableResponse> = {
  encode(message: CheckSudokuSolvableResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.solvable !== false) {
      writer.uint32(8).bool(message.solvable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckSudokuSolvableResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckSudokuSolvableResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.solvable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckSudokuSolvableResponse {
    return { solvable: isSet(object.solvable) ? globalThis.Boolean(object.solvable) : false };
  },

  toJSON(message: CheckSudokuSolvableResponse): unknown {
    const obj: any = {};
    if (message.solvable !== false) {
      obj.solvable = message.solvable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckSudokuSolvableResponse>, I>>(base?: I): CheckSudokuSolvableResponse {
    return CheckSudokuSolvableResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckSudokuSolvableResponse>, I>>(object: I): CheckSudokuSolvableResponse {
    const message = createBaseCheckSudokuSolvableResponse();
    message.solvable = object.solvable ?? false;
    return message;
  },
};

export type GameService = typeof GameService;
export const GameService = {
  solveSudoku: {
    path: "/pb.Game/SolveSudoku",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SolveSudokuRequest) => Buffer.from(SolveSudokuRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SolveSudokuRequest.decode(value),
    responseSerialize: (value: SolveSudokuResponse) => Buffer.from(SolveSudokuResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SolveSudokuResponse.decode(value),
  },
  generateSudoku: {
    path: "/pb.Game/GenerateSudoku",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GenerateSudokuRequest) => Buffer.from(GenerateSudokuRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GenerateSudokuRequest.decode(value),
    responseSerialize: (value: GenerateSudokuResponse) => Buffer.from(GenerateSudokuResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GenerateSudokuResponse.decode(value),
  },
  checkSudokuSolvable: {
    path: "/pb.Game/CheckSudokuSolvable",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckSudokuSolvableRequest) =>
      Buffer.from(CheckSudokuSolvableRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckSudokuSolvableRequest.decode(value),
    responseSerialize: (value: CheckSudokuSolvableResponse) =>
      Buffer.from(CheckSudokuSolvableResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckSudokuSolvableResponse.decode(value),
  },
} as const;

export interface GameServer extends UntypedServiceImplementation {
  solveSudoku: handleUnaryCall<SolveSudokuRequest, SolveSudokuResponse>;
  generateSudoku: handleUnaryCall<GenerateSudokuRequest, GenerateSudokuResponse>;
  checkSudokuSolvable: handleUnaryCall<CheckSudokuSolvableRequest, CheckSudokuSolvableResponse>;
}

export interface GameClient extends Client {
  solveSudoku(
    request: SolveSudokuRequest,
    callback: (error: ServiceError | null, response: SolveSudokuResponse) => void,
  ): ClientUnaryCall;
  solveSudoku(
    request: SolveSudokuRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SolveSudokuResponse) => void,
  ): ClientUnaryCall;
  solveSudoku(
    request: SolveSudokuRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SolveSudokuResponse) => void,
  ): ClientUnaryCall;
  generateSudoku(
    request: GenerateSudokuRequest,
    callback: (error: ServiceError | null, response: GenerateSudokuResponse) => void,
  ): ClientUnaryCall;
  generateSudoku(
    request: GenerateSudokuRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GenerateSudokuResponse) => void,
  ): ClientUnaryCall;
  generateSudoku(
    request: GenerateSudokuRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GenerateSudokuResponse) => void,
  ): ClientUnaryCall;
  checkSudokuSolvable(
    request: CheckSudokuSolvableRequest,
    callback: (error: ServiceError | null, response: CheckSudokuSolvableResponse) => void,
  ): ClientUnaryCall;
  checkSudokuSolvable(
    request: CheckSudokuSolvableRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckSudokuSolvableResponse) => void,
  ): ClientUnaryCall;
  checkSudokuSolvable(
    request: CheckSudokuSolvableRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckSudokuSolvableResponse) => void,
  ): ClientUnaryCall;
}

export const GameClient = makeGenericClientConstructor(GameService, "pb.Game") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GameClient;
  service: typeof GameService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
