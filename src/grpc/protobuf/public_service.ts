// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: public_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { CommentData, PostData, UserBaseInfo } from "./types";

export const protobufPackage = "pb";

export interface SignUpRequest {
  name: string;
  email: string;
  password: string;
  image: string;
}

export interface SignUpResponse {
  access_token: string;
  refresh_token: string;
}

export interface SignInRequest {
  email: string;
  password: string;
}

export interface SignInResponse {
  access_token: string;
  refresh_token: string;
}

export interface GetAccessTokenRequest {
  refresh_token: string;
}

export interface GetAccessTokenResponse {
  access_token: string;
  refresh_token: string;
}

export interface GetUserOverviewRequest {
  user_id: string;
}

export interface GetUserOverviewResponse {
  id: string;
  name: string;
  email: string;
  image: string;
  bio: string;
  total_posts: number;
  total_upvote: number;
  total_downvote: number;
  follower: number;
  following: number;
  created_at: number;
  updated_at: number;
}

export interface GetUserPostsRequest {
  user_id: string;
  limit: number;
  offset: number;
  sort: string;
}

export interface GetUserPostsResponse {
  posts: PostData[];
}

export interface GetAllPostsRequest {
  sort: string;
  limit: number;
  offset: number;
}

export interface GetAllPostsResponse {
  posts: PostData[];
}

export interface GetPostByIdRequest {
  post_id: string;
}

export interface GetPostByIdResponse {
  post: PostData | undefined;
}

export interface GetPostCommentsRequest {
  post_id: string;
  limit: number;
  offset: number;
}

export interface GetPostCommentsResponse {
  comments: CommentData[];
}

export interface GetCommentRepliesRequest {
  post_id: string;
  comment_id: string;
  limit: number;
  offset: number;
}

export interface GetCommentRepliesResponse {
  replies: CommentData[];
}

export interface GetTopUsersRequest {
  limit: number;
  offset: number;
}

export interface GetTopUsersResponse {
  users: UserBaseInfo[];
}

function createBaseSignUpRequest(): SignUpRequest {
  return { name: "", email: "", password: "", image: "" };
}

export const SignUpRequest: MessageFns<SignUpRequest> = {
  encode(message: SignUpRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUpRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: SignUpRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUpRequest>, I>>(base?: I): SignUpRequest {
    return SignUpRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUpRequest>, I>>(object: I): SignUpRequest {
    const message = createBaseSignUpRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseSignUpResponse(): SignUpResponse {
  return { access_token: "", refresh_token: "" };
}

export const SignUpResponse: MessageFns<SignUpResponse> = {
  encode(message: SignUpResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUpResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
    };
  },

  toJSON(message: SignUpResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUpResponse>, I>>(base?: I): SignUpResponse {
    return SignUpResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUpResponse>, I>>(object: I): SignUpResponse {
    const message = createBaseSignUpResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    return message;
  },
};

function createBaseSignInRequest(): SignInRequest {
  return { email: "", password: "" };
}

export const SignInRequest: MessageFns<SignInRequest> = {
  encode(message: SignInRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SignInRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInRequest>, I>>(base?: I): SignInRequest {
    return SignInRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInRequest>, I>>(object: I): SignInRequest {
    const message = createBaseSignInRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSignInResponse(): SignInResponse {
  return { access_token: "", refresh_token: "" };
}

export const SignInResponse: MessageFns<SignInResponse> = {
  encode(message: SignInResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
    };
  },

  toJSON(message: SignInResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInResponse>, I>>(base?: I): SignInResponse {
    return SignInResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInResponse>, I>>(object: I): SignInResponse {
    const message = createBaseSignInResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    return message;
  },
};

function createBaseGetAccessTokenRequest(): GetAccessTokenRequest {
  return { refresh_token: "" };
}

export const GetAccessTokenRequest: MessageFns<GetAccessTokenRequest> = {
  encode(message: GetAccessTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refresh_token !== "") {
      writer.uint32(10).string(message.refresh_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccessTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccessTokenRequest {
    return { refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "" };
  },

  toJSON(message: GetAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccessTokenRequest>, I>>(base?: I): GetAccessTokenRequest {
    return GetAccessTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccessTokenRequest>, I>>(object: I): GetAccessTokenRequest {
    const message = createBaseGetAccessTokenRequest();
    message.refresh_token = object.refresh_token ?? "";
    return message;
  },
};

function createBaseGetAccessTokenResponse(): GetAccessTokenResponse {
  return { access_token: "", refresh_token: "" };
}

export const GetAccessTokenResponse: MessageFns<GetAccessTokenResponse> = {
  encode(message: GetAccessTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccessTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccessTokenResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
    };
  },

  toJSON(message: GetAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccessTokenResponse>, I>>(base?: I): GetAccessTokenResponse {
    return GetAccessTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccessTokenResponse>, I>>(object: I): GetAccessTokenResponse {
    const message = createBaseGetAccessTokenResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    return message;
  },
};

function createBaseGetUserOverviewRequest(): GetUserOverviewRequest {
  return { user_id: "" };
}

export const GetUserOverviewRequest: MessageFns<GetUserOverviewRequest> = {
  encode(message: GetUserOverviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserOverviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserOverviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserOverviewRequest {
    return { user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "" };
  },

  toJSON(message: GetUserOverviewRequest): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserOverviewRequest>, I>>(base?: I): GetUserOverviewRequest {
    return GetUserOverviewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserOverviewRequest>, I>>(object: I): GetUserOverviewRequest {
    const message = createBaseGetUserOverviewRequest();
    message.user_id = object.user_id ?? "";
    return message;
  },
};

function createBaseGetUserOverviewResponse(): GetUserOverviewResponse {
  return {
    id: "",
    name: "",
    email: "",
    image: "",
    bio: "",
    total_posts: 0,
    total_upvote: 0,
    total_downvote: 0,
    follower: 0,
    following: 0,
    created_at: 0,
    updated_at: 0,
  };
}

export const GetUserOverviewResponse: MessageFns<GetUserOverviewResponse> = {
  encode(message: GetUserOverviewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.total_posts !== 0) {
      writer.uint32(48).uint32(message.total_posts);
    }
    if (message.total_upvote !== 0) {
      writer.uint32(56).uint32(message.total_upvote);
    }
    if (message.total_downvote !== 0) {
      writer.uint32(64).uint32(message.total_downvote);
    }
    if (message.follower !== 0) {
      writer.uint32(72).uint32(message.follower);
    }
    if (message.following !== 0) {
      writer.uint32(80).uint32(message.following);
    }
    if (message.created_at !== 0) {
      writer.uint32(88).uint64(message.created_at);
    }
    if (message.updated_at !== 0) {
      writer.uint32(96).uint64(message.updated_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserOverviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserOverviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.total_posts = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.total_upvote = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.total_downvote = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.follower = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.following = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.updated_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserOverviewResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      total_posts: isSet(object.total_posts) ? globalThis.Number(object.total_posts) : 0,
      total_upvote: isSet(object.total_upvote) ? globalThis.Number(object.total_upvote) : 0,
      total_downvote: isSet(object.total_downvote) ? globalThis.Number(object.total_downvote) : 0,
      follower: isSet(object.follower) ? globalThis.Number(object.follower) : 0,
      following: isSet(object.following) ? globalThis.Number(object.following) : 0,
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
      updated_at: isSet(object.updated_at) ? globalThis.Number(object.updated_at) : 0,
    };
  },

  toJSON(message: GetUserOverviewResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.total_posts !== 0) {
      obj.total_posts = Math.round(message.total_posts);
    }
    if (message.total_upvote !== 0) {
      obj.total_upvote = Math.round(message.total_upvote);
    }
    if (message.total_downvote !== 0) {
      obj.total_downvote = Math.round(message.total_downvote);
    }
    if (message.follower !== 0) {
      obj.follower = Math.round(message.follower);
    }
    if (message.following !== 0) {
      obj.following = Math.round(message.following);
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    if (message.updated_at !== 0) {
      obj.updated_at = Math.round(message.updated_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserOverviewResponse>, I>>(base?: I): GetUserOverviewResponse {
    return GetUserOverviewResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserOverviewResponse>, I>>(object: I): GetUserOverviewResponse {
    const message = createBaseGetUserOverviewResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.image = object.image ?? "";
    message.bio = object.bio ?? "";
    message.total_posts = object.total_posts ?? 0;
    message.total_upvote = object.total_upvote ?? 0;
    message.total_downvote = object.total_downvote ?? 0;
    message.follower = object.follower ?? 0;
    message.following = object.following ?? 0;
    message.created_at = object.created_at ?? 0;
    message.updated_at = object.updated_at ?? 0;
    return message;
  },
};

function createBaseGetUserPostsRequest(): GetUserPostsRequest {
  return { user_id: "", limit: 0, offset: 0, sort: "" };
}

export const GetUserPostsRequest: MessageFns<GetUserPostsRequest> = {
  encode(message: GetUserPostsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).uint32(message.offset);
    }
    if (message.sort !== "") {
      writer.uint32(34).string(message.sort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserPostsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPostsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sort = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPostsRequest {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
    };
  },

  toJSON(message: GetUserPostsRequest): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPostsRequest>, I>>(base?: I): GetUserPostsRequest {
    return GetUserPostsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserPostsRequest>, I>>(object: I): GetUserPostsRequest {
    const message = createBaseGetUserPostsRequest();
    message.user_id = object.user_id ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    message.sort = object.sort ?? "";
    return message;
  },
};

function createBaseGetUserPostsResponse(): GetUserPostsResponse {
  return { posts: [] };
}

export const GetUserPostsResponse: MessageFns<GetUserPostsResponse> = {
  encode(message: GetUserPostsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserPostsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPostsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPostsResponse {
    return { posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostData.fromJSON(e)) : [] };
  },

  toJSON(message: GetUserPostsResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPostsResponse>, I>>(base?: I): GetUserPostsResponse {
    return GetUserPostsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserPostsResponse>, I>>(object: I): GetUserPostsResponse {
    const message = createBaseGetUserPostsResponse();
    message.posts = object.posts?.map((e) => PostData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllPostsRequest(): GetAllPostsRequest {
  return { sort: "", limit: 0, offset: 0 };
}

export const GetAllPostsRequest: MessageFns<GetAllPostsRequest> = {
  encode(message: GetAllPostsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sort !== "") {
      writer.uint32(10).string(message.sort);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPostsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPostsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sort = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPostsRequest {
    return {
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetAllPostsRequest): unknown {
    const obj: any = {};
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPostsRequest>, I>>(base?: I): GetAllPostsRequest {
    return GetAllPostsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPostsRequest>, I>>(object: I): GetAllPostsRequest {
    const message = createBaseGetAllPostsRequest();
    message.sort = object.sort ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetAllPostsResponse(): GetAllPostsResponse {
  return { posts: [] };
}

export const GetAllPostsResponse: MessageFns<GetAllPostsResponse> = {
  encode(message: GetAllPostsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllPostsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPostsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllPostsResponse {
    return { posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostData.fromJSON(e)) : [] };
  },

  toJSON(message: GetAllPostsResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllPostsResponse>, I>>(base?: I): GetAllPostsResponse {
    return GetAllPostsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllPostsResponse>, I>>(object: I): GetAllPostsResponse {
    const message = createBaseGetAllPostsResponse();
    message.posts = object.posts?.map((e) => PostData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetPostByIdRequest(): GetPostByIdRequest {
  return { post_id: "" };
}

export const GetPostByIdRequest: MessageFns<GetPostByIdRequest> = {
  encode(message: GetPostByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post_id !== "") {
      writer.uint32(10).string(message.post_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostByIdRequest {
    return { post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "" };
  },

  toJSON(message: GetPostByIdRequest): unknown {
    const obj: any = {};
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPostByIdRequest>, I>>(base?: I): GetPostByIdRequest {
    return GetPostByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPostByIdRequest>, I>>(object: I): GetPostByIdRequest {
    const message = createBaseGetPostByIdRequest();
    message.post_id = object.post_id ?? "";
    return message;
  },
};

function createBaseGetPostByIdResponse(): GetPostByIdResponse {
  return { post: undefined };
}

export const GetPostByIdResponse: MessageFns<GetPostByIdResponse> = {
  encode(message: GetPostByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post !== undefined) {
      PostData.encode(message.post, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.post = PostData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostByIdResponse {
    return { post: isSet(object.post) ? PostData.fromJSON(object.post) : undefined };
  },

  toJSON(message: GetPostByIdResponse): unknown {
    const obj: any = {};
    if (message.post !== undefined) {
      obj.post = PostData.toJSON(message.post);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPostByIdResponse>, I>>(base?: I): GetPostByIdResponse {
    return GetPostByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPostByIdResponse>, I>>(object: I): GetPostByIdResponse {
    const message = createBaseGetPostByIdResponse();
    message.post = (object.post !== undefined && object.post !== null) ? PostData.fromPartial(object.post) : undefined;
    return message;
  },
};

function createBaseGetPostCommentsRequest(): GetPostCommentsRequest {
  return { post_id: "", limit: 0, offset: 0 };
}

export const GetPostCommentsRequest: MessageFns<GetPostCommentsRequest> = {
  encode(message: GetPostCommentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post_id !== "") {
      writer.uint32(10).string(message.post_id);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostCommentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostCommentsRequest {
    return {
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetPostCommentsRequest): unknown {
    const obj: any = {};
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPostCommentsRequest>, I>>(base?: I): GetPostCommentsRequest {
    return GetPostCommentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPostCommentsRequest>, I>>(object: I): GetPostCommentsRequest {
    const message = createBaseGetPostCommentsRequest();
    message.post_id = object.post_id ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetPostCommentsResponse(): GetPostCommentsResponse {
  return { comments: [] };
}

export const GetPostCommentsResponse: MessageFns<GetPostCommentsResponse> = {
  encode(message: GetPostCommentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.comments) {
      CommentData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostCommentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.comments.push(CommentData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostCommentsResponse {
    return {
      comments: globalThis.Array.isArray(object?.comments)
        ? object.comments.map((e: any) => CommentData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPostCommentsResponse): unknown {
    const obj: any = {};
    if (message.comments?.length) {
      obj.comments = message.comments.map((e) => CommentData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPostCommentsResponse>, I>>(base?: I): GetPostCommentsResponse {
    return GetPostCommentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPostCommentsResponse>, I>>(object: I): GetPostCommentsResponse {
    const message = createBaseGetPostCommentsResponse();
    message.comments = object.comments?.map((e) => CommentData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetCommentRepliesRequest(): GetCommentRepliesRequest {
  return { post_id: "", comment_id: "", limit: 0, offset: 0 };
}

export const GetCommentRepliesRequest: MessageFns<GetCommentRepliesRequest> = {
  encode(message: GetCommentRepliesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post_id !== "") {
      writer.uint32(10).string(message.post_id);
    }
    if (message.comment_id !== "") {
      writer.uint32(18).string(message.comment_id);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(32).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommentRepliesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommentRepliesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCommentRepliesRequest {
    return {
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      comment_id: isSet(object.comment_id) ? globalThis.String(object.comment_id) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetCommentRepliesRequest): unknown {
    const obj: any = {};
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.comment_id !== "") {
      obj.comment_id = message.comment_id;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCommentRepliesRequest>, I>>(base?: I): GetCommentRepliesRequest {
    return GetCommentRepliesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCommentRepliesRequest>, I>>(object: I): GetCommentRepliesRequest {
    const message = createBaseGetCommentRepliesRequest();
    message.post_id = object.post_id ?? "";
    message.comment_id = object.comment_id ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetCommentRepliesResponse(): GetCommentRepliesResponse {
  return { replies: [] };
}

export const GetCommentRepliesResponse: MessageFns<GetCommentRepliesResponse> = {
  encode(message: GetCommentRepliesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.replies) {
      CommentData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommentRepliesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommentRepliesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.replies.push(CommentData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCommentRepliesResponse {
    return {
      replies: globalThis.Array.isArray(object?.replies) ? object.replies.map((e: any) => CommentData.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetCommentRepliesResponse): unknown {
    const obj: any = {};
    if (message.replies?.length) {
      obj.replies = message.replies.map((e) => CommentData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCommentRepliesResponse>, I>>(base?: I): GetCommentRepliesResponse {
    return GetCommentRepliesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCommentRepliesResponse>, I>>(object: I): GetCommentRepliesResponse {
    const message = createBaseGetCommentRepliesResponse();
    message.replies = object.replies?.map((e) => CommentData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetTopUsersRequest(): GetTopUsersRequest {
  return { limit: 0, offset: 0 };
}

export const GetTopUsersRequest: MessageFns<GetTopUsersRequest> = {
  encode(message: GetTopUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(16).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTopUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTopUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTopUsersRequest {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetTopUsersRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTopUsersRequest>, I>>(base?: I): GetTopUsersRequest {
    return GetTopUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTopUsersRequest>, I>>(object: I): GetTopUsersRequest {
    const message = createBaseGetTopUsersRequest();
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetTopUsersResponse(): GetTopUsersResponse {
  return { users: [] };
}

export const GetTopUsersResponse: MessageFns<GetTopUsersResponse> = {
  encode(message: GetTopUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserBaseInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTopUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTopUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserBaseInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTopUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserBaseInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetTopUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserBaseInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTopUsersResponse>, I>>(base?: I): GetTopUsersResponse {
    return GetTopUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTopUsersResponse>, I>>(object: I): GetTopUsersResponse {
    const message = createBaseGetTopUsersResponse();
    message.users = object.users?.map((e) => UserBaseInfo.fromPartial(e)) || [];
    return message;
  },
};

export type PublicService = typeof PublicService;
export const PublicService = {
  signUp: {
    path: "/pb.Public/SignUp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignUpRequest) => Buffer.from(SignUpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignUpRequest.decode(value),
    responseSerialize: (value: SignUpResponse) => Buffer.from(SignUpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignUpResponse.decode(value),
  },
  signIn: {
    path: "/pb.Public/SignIn",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignInRequest) => Buffer.from(SignInRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignInRequest.decode(value),
    responseSerialize: (value: SignInResponse) => Buffer.from(SignInResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignInResponse.decode(value),
  },
  getAccessToken: {
    path: "/pb.Public/GetAccessToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAccessTokenRequest) => Buffer.from(GetAccessTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAccessTokenRequest.decode(value),
    responseSerialize: (value: GetAccessTokenResponse) => Buffer.from(GetAccessTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAccessTokenResponse.decode(value),
  },
  getUserOverview: {
    path: "/pb.Public/GetUserOverview",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserOverviewRequest) => Buffer.from(GetUserOverviewRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserOverviewRequest.decode(value),
    responseSerialize: (value: GetUserOverviewResponse) => Buffer.from(GetUserOverviewResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserOverviewResponse.decode(value),
  },
  getUserPosts: {
    path: "/pb.Public/GetUserPosts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserPostsRequest) => Buffer.from(GetUserPostsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserPostsRequest.decode(value),
    responseSerialize: (value: GetUserPostsResponse) => Buffer.from(GetUserPostsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserPostsResponse.decode(value),
  },
  getAllPosts: {
    path: "/pb.Public/GetAllPosts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllPostsRequest) => Buffer.from(GetAllPostsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllPostsRequest.decode(value),
    responseSerialize: (value: GetAllPostsResponse) => Buffer.from(GetAllPostsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllPostsResponse.decode(value),
  },
  getPostById: {
    path: "/pb.Public/GetPostById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPostByIdRequest) => Buffer.from(GetPostByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPostByIdRequest.decode(value),
    responseSerialize: (value: GetPostByIdResponse) => Buffer.from(GetPostByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetPostByIdResponse.decode(value),
  },
  getPostComments: {
    path: "/pb.Public/GetPostComments",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPostCommentsRequest) => Buffer.from(GetPostCommentsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPostCommentsRequest.decode(value),
    responseSerialize: (value: GetPostCommentsResponse) => Buffer.from(GetPostCommentsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetPostCommentsResponse.decode(value),
  },
  getCommentReplies: {
    path: "/pb.Public/GetCommentReplies",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCommentRepliesRequest) => Buffer.from(GetCommentRepliesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetCommentRepliesRequest.decode(value),
    responseSerialize: (value: GetCommentRepliesResponse) =>
      Buffer.from(GetCommentRepliesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCommentRepliesResponse.decode(value),
  },
  getTopUsers: {
    path: "/pb.Public/GetTopUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTopUsersRequest) => Buffer.from(GetTopUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTopUsersRequest.decode(value),
    responseSerialize: (value: GetTopUsersResponse) => Buffer.from(GetTopUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTopUsersResponse.decode(value),
  },
} as const;

export interface PublicServer extends UntypedServiceImplementation {
  signUp: handleUnaryCall<SignUpRequest, SignUpResponse>;
  signIn: handleUnaryCall<SignInRequest, SignInResponse>;
  getAccessToken: handleUnaryCall<GetAccessTokenRequest, GetAccessTokenResponse>;
  getUserOverview: handleUnaryCall<GetUserOverviewRequest, GetUserOverviewResponse>;
  getUserPosts: handleUnaryCall<GetUserPostsRequest, GetUserPostsResponse>;
  getAllPosts: handleUnaryCall<GetAllPostsRequest, GetAllPostsResponse>;
  getPostById: handleUnaryCall<GetPostByIdRequest, GetPostByIdResponse>;
  getPostComments: handleUnaryCall<GetPostCommentsRequest, GetPostCommentsResponse>;
  getCommentReplies: handleUnaryCall<GetCommentRepliesRequest, GetCommentRepliesResponse>;
  getTopUsers: handleUnaryCall<GetTopUsersRequest, GetTopUsersResponse>;
}

export interface PublicClient extends Client {
  signUp(
    request: SignUpRequest,
    callback: (error: ServiceError | null, response: SignUpResponse) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignUpResponse) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignUpResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  getAccessToken(
    request: GetAccessTokenRequest,
    callback: (error: ServiceError | null, response: GetAccessTokenResponse) => void,
  ): ClientUnaryCall;
  getAccessToken(
    request: GetAccessTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAccessTokenResponse) => void,
  ): ClientUnaryCall;
  getAccessToken(
    request: GetAccessTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAccessTokenResponse) => void,
  ): ClientUnaryCall;
  getUserOverview(
    request: GetUserOverviewRequest,
    callback: (error: ServiceError | null, response: GetUserOverviewResponse) => void,
  ): ClientUnaryCall;
  getUserOverview(
    request: GetUserOverviewRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserOverviewResponse) => void,
  ): ClientUnaryCall;
  getUserOverview(
    request: GetUserOverviewRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserOverviewResponse) => void,
  ): ClientUnaryCall;
  getUserPosts(
    request: GetUserPostsRequest,
    callback: (error: ServiceError | null, response: GetUserPostsResponse) => void,
  ): ClientUnaryCall;
  getUserPosts(
    request: GetUserPostsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserPostsResponse) => void,
  ): ClientUnaryCall;
  getUserPosts(
    request: GetUserPostsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserPostsResponse) => void,
  ): ClientUnaryCall;
  getAllPosts(
    request: GetAllPostsRequest,
    callback: (error: ServiceError | null, response: GetAllPostsResponse) => void,
  ): ClientUnaryCall;
  getAllPosts(
    request: GetAllPostsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllPostsResponse) => void,
  ): ClientUnaryCall;
  getAllPosts(
    request: GetAllPostsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllPostsResponse) => void,
  ): ClientUnaryCall;
  getPostById(
    request: GetPostByIdRequest,
    callback: (error: ServiceError | null, response: GetPostByIdResponse) => void,
  ): ClientUnaryCall;
  getPostById(
    request: GetPostByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPostByIdResponse) => void,
  ): ClientUnaryCall;
  getPostById(
    request: GetPostByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPostByIdResponse) => void,
  ): ClientUnaryCall;
  getPostComments(
    request: GetPostCommentsRequest,
    callback: (error: ServiceError | null, response: GetPostCommentsResponse) => void,
  ): ClientUnaryCall;
  getPostComments(
    request: GetPostCommentsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPostCommentsResponse) => void,
  ): ClientUnaryCall;
  getPostComments(
    request: GetPostCommentsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPostCommentsResponse) => void,
  ): ClientUnaryCall;
  getCommentReplies(
    request: GetCommentRepliesRequest,
    callback: (error: ServiceError | null, response: GetCommentRepliesResponse) => void,
  ): ClientUnaryCall;
  getCommentReplies(
    request: GetCommentRepliesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCommentRepliesResponse) => void,
  ): ClientUnaryCall;
  getCommentReplies(
    request: GetCommentRepliesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCommentRepliesResponse) => void,
  ): ClientUnaryCall;
  getTopUsers(
    request: GetTopUsersRequest,
    callback: (error: ServiceError | null, response: GetTopUsersResponse) => void,
  ): ClientUnaryCall;
  getTopUsers(
    request: GetTopUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTopUsersResponse) => void,
  ): ClientUnaryCall;
  getTopUsers(
    request: GetTopUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTopUsersResponse) => void,
  ): ClientUnaryCall;
}

export const PublicClient = makeGenericClientConstructor(PublicService, "pb.Public") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PublicClient;
  service: typeof PublicService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
