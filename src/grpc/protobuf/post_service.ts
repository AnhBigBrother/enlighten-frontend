// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: post_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { PostData, Voted, votedFromJSON, votedToJSON } from "./types";

export const protobufPackage = "pb";

export interface GetFollowedPostsRequest {
  access_token: string;
  sort: string;
  limit: number;
  offset: number;
}

export interface GetFollowedPostsResponse {
  posts: PostData[];
}

export interface CreatePostRequest {
  access_token: string;
  title: string;
  content: string;
}

export interface CreatePostResponse {
  created: CreatePostResponse_CreatedPost | undefined;
}

export interface CreatePostResponse_CreatedPost {
  id: string;
  title: string;
  content: string;
  author_id: string;
  created_at: number;
  updated_at: number;
}

export interface UpVotePostRequest {
  access_token: string;
  post_id: string;
}

export interface UpVotePostResponse {
  message: string;
}

export interface DownVotePostRequest {
  access_token: string;
  post_id: string;
}

export interface DownVotePostResponse {
  message: string;
}

export interface SavePostRequest {
  access_token: string;
  post_id: string;
}

export interface SavePostResponse {
  saved_post_id: string;
  created_at: number;
}

export interface UnSavePostRequest {
  access_token: string;
  post_id: string;
}

export interface UnSavePostResponse {
  message: string;
}

export interface GetAllSavedPostsRequest {
  access_token: string;
  sort: string;
  limit: number;
  offset: number;
}

export interface GetAllSavedPostsResponse {
  posts: PostData[];
}

export interface CheckPostInteractedRequest {
  access_token: string;
  post_id: string;
}

export interface CheckPostInteractedResponse {
  post_id: string;
  voted: Voted;
  saved: boolean;
}

export interface AddPostCommentRequest {
  access_token: string;
  post_id: string;
  comment: string;
}

export interface AddPostCommentResponse {
  created: AddPostCommentResponse_CreatedComment | undefined;
}

export interface AddPostCommentResponse_CreatedComment {
  id: string;
  comment: string;
  author_id: string;
  post_id: string;
  parent_comment_id: string;
  created_at: number;
}

function createBaseGetFollowedPostsRequest(): GetFollowedPostsRequest {
  return { access_token: "", sort: "", limit: 0, offset: 0 };
}

export const GetFollowedPostsRequest: MessageFns<GetFollowedPostsRequest> = {
  encode(message: GetFollowedPostsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.sort !== "") {
      writer.uint32(18).string(message.sort);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(32).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFollowedPostsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFollowedPostsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sort = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFollowedPostsRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetFollowedPostsRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFollowedPostsRequest>, I>>(base?: I): GetFollowedPostsRequest {
    return GetFollowedPostsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFollowedPostsRequest>, I>>(object: I): GetFollowedPostsRequest {
    const message = createBaseGetFollowedPostsRequest();
    message.access_token = object.access_token ?? "";
    message.sort = object.sort ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetFollowedPostsResponse(): GetFollowedPostsResponse {
  return { posts: [] };
}

export const GetFollowedPostsResponse: MessageFns<GetFollowedPostsResponse> = {
  encode(message: GetFollowedPostsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFollowedPostsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFollowedPostsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFollowedPostsResponse {
    return { posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostData.fromJSON(e)) : [] };
  },

  toJSON(message: GetFollowedPostsResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFollowedPostsResponse>, I>>(base?: I): GetFollowedPostsResponse {
    return GetFollowedPostsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFollowedPostsResponse>, I>>(object: I): GetFollowedPostsResponse {
    const message = createBaseGetFollowedPostsResponse();
    message.posts = object.posts?.map((e) => PostData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePostRequest(): CreatePostRequest {
  return { access_token: "", title: "", content: "" };
}

export const CreatePostRequest: MessageFns<CreatePostRequest> = {
  encode(message: CreatePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: CreatePostRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostRequest>, I>>(base?: I): CreatePostRequest {
    return CreatePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostRequest>, I>>(object: I): CreatePostRequest {
    const message = createBaseCreatePostRequest();
    message.access_token = object.access_token ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseCreatePostResponse(): CreatePostResponse {
  return { created: undefined };
}

export const CreatePostResponse: MessageFns<CreatePostResponse> = {
  encode(message: CreatePostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.created !== undefined) {
      CreatePostResponse_CreatedPost.encode(message.created, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.created = CreatePostResponse_CreatedPost.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostResponse {
    return { created: isSet(object.created) ? CreatePostResponse_CreatedPost.fromJSON(object.created) : undefined };
  },

  toJSON(message: CreatePostResponse): unknown {
    const obj: any = {};
    if (message.created !== undefined) {
      obj.created = CreatePostResponse_CreatedPost.toJSON(message.created);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostResponse>, I>>(base?: I): CreatePostResponse {
    return CreatePostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostResponse>, I>>(object: I): CreatePostResponse {
    const message = createBaseCreatePostResponse();
    message.created = (object.created !== undefined && object.created !== null)
      ? CreatePostResponse_CreatedPost.fromPartial(object.created)
      : undefined;
    return message;
  },
};

function createBaseCreatePostResponse_CreatedPost(): CreatePostResponse_CreatedPost {
  return { id: "", title: "", content: "", author_id: "", created_at: 0, updated_at: 0 };
}

export const CreatePostResponse_CreatedPost: MessageFns<CreatePostResponse_CreatedPost> = {
  encode(message: CreatePostResponse_CreatedPost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.author_id !== "") {
      writer.uint32(34).string(message.author_id);
    }
    if (message.created_at !== 0) {
      writer.uint32(40).uint64(message.created_at);
    }
    if (message.updated_at !== 0) {
      writer.uint32(48).uint64(message.updated_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostResponse_CreatedPost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostResponse_CreatedPost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.author_id = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.updated_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostResponse_CreatedPost {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      author_id: isSet(object.author_id) ? globalThis.String(object.author_id) : "",
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
      updated_at: isSet(object.updated_at) ? globalThis.Number(object.updated_at) : 0,
    };
  },

  toJSON(message: CreatePostResponse_CreatedPost): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.author_id !== "") {
      obj.author_id = message.author_id;
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    if (message.updated_at !== 0) {
      obj.updated_at = Math.round(message.updated_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostResponse_CreatedPost>, I>>(base?: I): CreatePostResponse_CreatedPost {
    return CreatePostResponse_CreatedPost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostResponse_CreatedPost>, I>>(
    object: I,
  ): CreatePostResponse_CreatedPost {
    const message = createBaseCreatePostResponse_CreatedPost();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.author_id = object.author_id ?? "";
    message.created_at = object.created_at ?? 0;
    message.updated_at = object.updated_at ?? 0;
    return message;
  },
};

function createBaseUpVotePostRequest(): UpVotePostRequest {
  return { access_token: "", post_id: "" };
}

export const UpVotePostRequest: MessageFns<UpVotePostRequest> = {
  encode(message: UpVotePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpVotePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpVotePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpVotePostRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
    };
  },

  toJSON(message: UpVotePostRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpVotePostRequest>, I>>(base?: I): UpVotePostRequest {
    return UpVotePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpVotePostRequest>, I>>(object: I): UpVotePostRequest {
    const message = createBaseUpVotePostRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    return message;
  },
};

function createBaseUpVotePostResponse(): UpVotePostResponse {
  return { message: "" };
}

export const UpVotePostResponse: MessageFns<UpVotePostResponse> = {
  encode(message: UpVotePostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpVotePostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpVotePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpVotePostResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UpVotePostResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpVotePostResponse>, I>>(base?: I): UpVotePostResponse {
    return UpVotePostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpVotePostResponse>, I>>(object: I): UpVotePostResponse {
    const message = createBaseUpVotePostResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseDownVotePostRequest(): DownVotePostRequest {
  return { access_token: "", post_id: "" };
}

export const DownVotePostRequest: MessageFns<DownVotePostRequest> = {
  encode(message: DownVotePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownVotePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownVotePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownVotePostRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
    };
  },

  toJSON(message: DownVotePostRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownVotePostRequest>, I>>(base?: I): DownVotePostRequest {
    return DownVotePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownVotePostRequest>, I>>(object: I): DownVotePostRequest {
    const message = createBaseDownVotePostRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    return message;
  },
};

function createBaseDownVotePostResponse(): DownVotePostResponse {
  return { message: "" };
}

export const DownVotePostResponse: MessageFns<DownVotePostResponse> = {
  encode(message: DownVotePostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownVotePostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownVotePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownVotePostResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: DownVotePostResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownVotePostResponse>, I>>(base?: I): DownVotePostResponse {
    return DownVotePostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownVotePostResponse>, I>>(object: I): DownVotePostResponse {
    const message = createBaseDownVotePostResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSavePostRequest(): SavePostRequest {
  return { access_token: "", post_id: "" };
}

export const SavePostRequest: MessageFns<SavePostRequest> = {
  encode(message: SavePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SavePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSavePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SavePostRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
    };
  },

  toJSON(message: SavePostRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SavePostRequest>, I>>(base?: I): SavePostRequest {
    return SavePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SavePostRequest>, I>>(object: I): SavePostRequest {
    const message = createBaseSavePostRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    return message;
  },
};

function createBaseSavePostResponse(): SavePostResponse {
  return { saved_post_id: "", created_at: 0 };
}

export const SavePostResponse: MessageFns<SavePostResponse> = {
  encode(message: SavePostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.saved_post_id !== "") {
      writer.uint32(10).string(message.saved_post_id);
    }
    if (message.created_at !== 0) {
      writer.uint32(16).uint64(message.created_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SavePostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSavePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.saved_post_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SavePostResponse {
    return {
      saved_post_id: isSet(object.saved_post_id) ? globalThis.String(object.saved_post_id) : "",
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
    };
  },

  toJSON(message: SavePostResponse): unknown {
    const obj: any = {};
    if (message.saved_post_id !== "") {
      obj.saved_post_id = message.saved_post_id;
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SavePostResponse>, I>>(base?: I): SavePostResponse {
    return SavePostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SavePostResponse>, I>>(object: I): SavePostResponse {
    const message = createBaseSavePostResponse();
    message.saved_post_id = object.saved_post_id ?? "";
    message.created_at = object.created_at ?? 0;
    return message;
  },
};

function createBaseUnSavePostRequest(): UnSavePostRequest {
  return { access_token: "", post_id: "" };
}

export const UnSavePostRequest: MessageFns<UnSavePostRequest> = {
  encode(message: UnSavePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnSavePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnSavePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnSavePostRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
    };
  },

  toJSON(message: UnSavePostRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnSavePostRequest>, I>>(base?: I): UnSavePostRequest {
    return UnSavePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnSavePostRequest>, I>>(object: I): UnSavePostRequest {
    const message = createBaseUnSavePostRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    return message;
  },
};

function createBaseUnSavePostResponse(): UnSavePostResponse {
  return { message: "" };
}

export const UnSavePostResponse: MessageFns<UnSavePostResponse> = {
  encode(message: UnSavePostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnSavePostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnSavePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnSavePostResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UnSavePostResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnSavePostResponse>, I>>(base?: I): UnSavePostResponse {
    return UnSavePostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnSavePostResponse>, I>>(object: I): UnSavePostResponse {
    const message = createBaseUnSavePostResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetAllSavedPostsRequest(): GetAllSavedPostsRequest {
  return { access_token: "", sort: "", limit: 0, offset: 0 };
}

export const GetAllSavedPostsRequest: MessageFns<GetAllSavedPostsRequest> = {
  encode(message: GetAllSavedPostsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.sort !== "") {
      writer.uint32(18).string(message.sort);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(32).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllSavedPostsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllSavedPostsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sort = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllSavedPostsRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetAllSavedPostsRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllSavedPostsRequest>, I>>(base?: I): GetAllSavedPostsRequest {
    return GetAllSavedPostsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllSavedPostsRequest>, I>>(object: I): GetAllSavedPostsRequest {
    const message = createBaseGetAllSavedPostsRequest();
    message.access_token = object.access_token ?? "";
    message.sort = object.sort ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetAllSavedPostsResponse(): GetAllSavedPostsResponse {
  return { posts: [] };
}

export const GetAllSavedPostsResponse: MessageFns<GetAllSavedPostsResponse> = {
  encode(message: GetAllSavedPostsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllSavedPostsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllSavedPostsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllSavedPostsResponse {
    return { posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostData.fromJSON(e)) : [] };
  },

  toJSON(message: GetAllSavedPostsResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllSavedPostsResponse>, I>>(base?: I): GetAllSavedPostsResponse {
    return GetAllSavedPostsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllSavedPostsResponse>, I>>(object: I): GetAllSavedPostsResponse {
    const message = createBaseGetAllSavedPostsResponse();
    message.posts = object.posts?.map((e) => PostData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCheckPostInteractedRequest(): CheckPostInteractedRequest {
  return { access_token: "", post_id: "" };
}

export const CheckPostInteractedRequest: MessageFns<CheckPostInteractedRequest> = {
  encode(message: CheckPostInteractedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckPostInteractedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckPostInteractedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckPostInteractedRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
    };
  },

  toJSON(message: CheckPostInteractedRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckPostInteractedRequest>, I>>(base?: I): CheckPostInteractedRequest {
    return CheckPostInteractedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckPostInteractedRequest>, I>>(object: I): CheckPostInteractedRequest {
    const message = createBaseCheckPostInteractedRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    return message;
  },
};

function createBaseCheckPostInteractedResponse(): CheckPostInteractedResponse {
  return { post_id: "", voted: 0, saved: false };
}

export const CheckPostInteractedResponse: MessageFns<CheckPostInteractedResponse> = {
  encode(message: CheckPostInteractedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post_id !== "") {
      writer.uint32(10).string(message.post_id);
    }
    if (message.voted !== 0) {
      writer.uint32(16).int32(message.voted);
    }
    if (message.saved !== false) {
      writer.uint32(24).bool(message.saved);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckPostInteractedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckPostInteractedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.voted = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.saved = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckPostInteractedResponse {
    return {
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      voted: isSet(object.voted) ? votedFromJSON(object.voted) : 0,
      saved: isSet(object.saved) ? globalThis.Boolean(object.saved) : false,
    };
  },

  toJSON(message: CheckPostInteractedResponse): unknown {
    const obj: any = {};
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.voted !== 0) {
      obj.voted = votedToJSON(message.voted);
    }
    if (message.saved !== false) {
      obj.saved = message.saved;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckPostInteractedResponse>, I>>(base?: I): CheckPostInteractedResponse {
    return CheckPostInteractedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckPostInteractedResponse>, I>>(object: I): CheckPostInteractedResponse {
    const message = createBaseCheckPostInteractedResponse();
    message.post_id = object.post_id ?? "";
    message.voted = object.voted ?? 0;
    message.saved = object.saved ?? false;
    return message;
  },
};

function createBaseAddPostCommentRequest(): AddPostCommentRequest {
  return { access_token: "", post_id: "", comment: "" };
}

export const AddPostCommentRequest: MessageFns<AddPostCommentRequest> = {
  encode(message: AddPostCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    if (message.comment !== "") {
      writer.uint32(26).string(message.comment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPostCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPostCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPostCommentRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: AddPostCommentRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPostCommentRequest>, I>>(base?: I): AddPostCommentRequest {
    return AddPostCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPostCommentRequest>, I>>(object: I): AddPostCommentRequest {
    const message = createBaseAddPostCommentRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    message.comment = object.comment ?? "";
    return message;
  },
};

function createBaseAddPostCommentResponse(): AddPostCommentResponse {
  return { created: undefined };
}

export const AddPostCommentResponse: MessageFns<AddPostCommentResponse> = {
  encode(message: AddPostCommentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.created !== undefined) {
      AddPostCommentResponse_CreatedComment.encode(message.created, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPostCommentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPostCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.created = AddPostCommentResponse_CreatedComment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPostCommentResponse {
    return {
      created: isSet(object.created) ? AddPostCommentResponse_CreatedComment.fromJSON(object.created) : undefined,
    };
  },

  toJSON(message: AddPostCommentResponse): unknown {
    const obj: any = {};
    if (message.created !== undefined) {
      obj.created = AddPostCommentResponse_CreatedComment.toJSON(message.created);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPostCommentResponse>, I>>(base?: I): AddPostCommentResponse {
    return AddPostCommentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPostCommentResponse>, I>>(object: I): AddPostCommentResponse {
    const message = createBaseAddPostCommentResponse();
    message.created = (object.created !== undefined && object.created !== null)
      ? AddPostCommentResponse_CreatedComment.fromPartial(object.created)
      : undefined;
    return message;
  },
};

function createBaseAddPostCommentResponse_CreatedComment(): AddPostCommentResponse_CreatedComment {
  return { id: "", comment: "", author_id: "", post_id: "", parent_comment_id: "", created_at: 0 };
}

export const AddPostCommentResponse_CreatedComment: MessageFns<AddPostCommentResponse_CreatedComment> = {
  encode(message: AddPostCommentResponse_CreatedComment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.comment !== "") {
      writer.uint32(18).string(message.comment);
    }
    if (message.author_id !== "") {
      writer.uint32(26).string(message.author_id);
    }
    if (message.post_id !== "") {
      writer.uint32(34).string(message.post_id);
    }
    if (message.parent_comment_id !== "") {
      writer.uint32(42).string(message.parent_comment_id);
    }
    if (message.created_at !== 0) {
      writer.uint32(48).uint64(message.created_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPostCommentResponse_CreatedComment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPostCommentResponse_CreatedComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parent_comment_id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPostCommentResponse_CreatedComment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      author_id: isSet(object.author_id) ? globalThis.String(object.author_id) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      parent_comment_id: isSet(object.parent_comment_id) ? globalThis.String(object.parent_comment_id) : "",
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
    };
  },

  toJSON(message: AddPostCommentResponse_CreatedComment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.author_id !== "") {
      obj.author_id = message.author_id;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.parent_comment_id !== "") {
      obj.parent_comment_id = message.parent_comment_id;
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPostCommentResponse_CreatedComment>, I>>(
    base?: I,
  ): AddPostCommentResponse_CreatedComment {
    return AddPostCommentResponse_CreatedComment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPostCommentResponse_CreatedComment>, I>>(
    object: I,
  ): AddPostCommentResponse_CreatedComment {
    const message = createBaseAddPostCommentResponse_CreatedComment();
    message.id = object.id ?? "";
    message.comment = object.comment ?? "";
    message.author_id = object.author_id ?? "";
    message.post_id = object.post_id ?? "";
    message.parent_comment_id = object.parent_comment_id ?? "";
    message.created_at = object.created_at ?? 0;
    return message;
  },
};

export type PostService = typeof PostService;
export const PostService = {
  getFollowedPosts: {
    path: "/pb.Post/GetFollowedPosts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFollowedPostsRequest) => Buffer.from(GetFollowedPostsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFollowedPostsRequest.decode(value),
    responseSerialize: (value: GetFollowedPostsResponse) =>
      Buffer.from(GetFollowedPostsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFollowedPostsResponse.decode(value),
  },
  createPost: {
    path: "/pb.Post/CreatePost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePostRequest) => Buffer.from(CreatePostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreatePostRequest.decode(value),
    responseSerialize: (value: CreatePostResponse) => Buffer.from(CreatePostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreatePostResponse.decode(value),
  },
  upVotePost: {
    path: "/pb.Post/UpVotePost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpVotePostRequest) => Buffer.from(UpVotePostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpVotePostRequest.decode(value),
    responseSerialize: (value: UpVotePostResponse) => Buffer.from(UpVotePostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpVotePostResponse.decode(value),
  },
  downVotePost: {
    path: "/pb.Post/DownVotePost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DownVotePostRequest) => Buffer.from(DownVotePostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DownVotePostRequest.decode(value),
    responseSerialize: (value: DownVotePostResponse) => Buffer.from(DownVotePostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DownVotePostResponse.decode(value),
  },
  savePost: {
    path: "/pb.Post/SavePost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SavePostRequest) => Buffer.from(SavePostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SavePostRequest.decode(value),
    responseSerialize: (value: SavePostResponse) => Buffer.from(SavePostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SavePostResponse.decode(value),
  },
  unSavePost: {
    path: "/pb.Post/UnSavePost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UnSavePostRequest) => Buffer.from(UnSavePostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UnSavePostRequest.decode(value),
    responseSerialize: (value: UnSavePostResponse) => Buffer.from(UnSavePostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UnSavePostResponse.decode(value),
  },
  getAllSavedPosts: {
    path: "/pb.Post/GetAllSavedPosts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllSavedPostsRequest) => Buffer.from(GetAllSavedPostsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllSavedPostsRequest.decode(value),
    responseSerialize: (value: GetAllSavedPostsResponse) =>
      Buffer.from(GetAllSavedPostsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllSavedPostsResponse.decode(value),
  },
  checkPostInteracted: {
    path: "/pb.Post/CheckPostInteracted",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckPostInteractedRequest) =>
      Buffer.from(CheckPostInteractedRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckPostInteractedRequest.decode(value),
    responseSerialize: (value: CheckPostInteractedResponse) =>
      Buffer.from(CheckPostInteractedResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckPostInteractedResponse.decode(value),
  },
  addPostComment: {
    path: "/pb.Post/AddPostComment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddPostCommentRequest) => Buffer.from(AddPostCommentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddPostCommentRequest.decode(value),
    responseSerialize: (value: AddPostCommentResponse) => Buffer.from(AddPostCommentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddPostCommentResponse.decode(value),
  },
} as const;

export interface PostServer extends UntypedServiceImplementation {
  getFollowedPosts: handleUnaryCall<GetFollowedPostsRequest, GetFollowedPostsResponse>;
  createPost: handleUnaryCall<CreatePostRequest, CreatePostResponse>;
  upVotePost: handleUnaryCall<UpVotePostRequest, UpVotePostResponse>;
  downVotePost: handleUnaryCall<DownVotePostRequest, DownVotePostResponse>;
  savePost: handleUnaryCall<SavePostRequest, SavePostResponse>;
  unSavePost: handleUnaryCall<UnSavePostRequest, UnSavePostResponse>;
  getAllSavedPosts: handleUnaryCall<GetAllSavedPostsRequest, GetAllSavedPostsResponse>;
  checkPostInteracted: handleUnaryCall<CheckPostInteractedRequest, CheckPostInteractedResponse>;
  addPostComment: handleUnaryCall<AddPostCommentRequest, AddPostCommentResponse>;
}

export interface PostClient extends Client {
  getFollowedPosts(
    request: GetFollowedPostsRequest,
    callback: (error: ServiceError | null, response: GetFollowedPostsResponse) => void,
  ): ClientUnaryCall;
  getFollowedPosts(
    request: GetFollowedPostsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFollowedPostsResponse) => void,
  ): ClientUnaryCall;
  getFollowedPosts(
    request: GetFollowedPostsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFollowedPostsResponse) => void,
  ): ClientUnaryCall;
  createPost(
    request: CreatePostRequest,
    callback: (error: ServiceError | null, response: CreatePostResponse) => void,
  ): ClientUnaryCall;
  createPost(
    request: CreatePostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreatePostResponse) => void,
  ): ClientUnaryCall;
  createPost(
    request: CreatePostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreatePostResponse) => void,
  ): ClientUnaryCall;
  upVotePost(
    request: UpVotePostRequest,
    callback: (error: ServiceError | null, response: UpVotePostResponse) => void,
  ): ClientUnaryCall;
  upVotePost(
    request: UpVotePostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpVotePostResponse) => void,
  ): ClientUnaryCall;
  upVotePost(
    request: UpVotePostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpVotePostResponse) => void,
  ): ClientUnaryCall;
  downVotePost(
    request: DownVotePostRequest,
    callback: (error: ServiceError | null, response: DownVotePostResponse) => void,
  ): ClientUnaryCall;
  downVotePost(
    request: DownVotePostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DownVotePostResponse) => void,
  ): ClientUnaryCall;
  downVotePost(
    request: DownVotePostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DownVotePostResponse) => void,
  ): ClientUnaryCall;
  savePost(
    request: SavePostRequest,
    callback: (error: ServiceError | null, response: SavePostResponse) => void,
  ): ClientUnaryCall;
  savePost(
    request: SavePostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SavePostResponse) => void,
  ): ClientUnaryCall;
  savePost(
    request: SavePostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SavePostResponse) => void,
  ): ClientUnaryCall;
  unSavePost(
    request: UnSavePostRequest,
    callback: (error: ServiceError | null, response: UnSavePostResponse) => void,
  ): ClientUnaryCall;
  unSavePost(
    request: UnSavePostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UnSavePostResponse) => void,
  ): ClientUnaryCall;
  unSavePost(
    request: UnSavePostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UnSavePostResponse) => void,
  ): ClientUnaryCall;
  getAllSavedPosts(
    request: GetAllSavedPostsRequest,
    callback: (error: ServiceError | null, response: GetAllSavedPostsResponse) => void,
  ): ClientUnaryCall;
  getAllSavedPosts(
    request: GetAllSavedPostsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllSavedPostsResponse) => void,
  ): ClientUnaryCall;
  getAllSavedPosts(
    request: GetAllSavedPostsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllSavedPostsResponse) => void,
  ): ClientUnaryCall;
  checkPostInteracted(
    request: CheckPostInteractedRequest,
    callback: (error: ServiceError | null, response: CheckPostInteractedResponse) => void,
  ): ClientUnaryCall;
  checkPostInteracted(
    request: CheckPostInteractedRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckPostInteractedResponse) => void,
  ): ClientUnaryCall;
  checkPostInteracted(
    request: CheckPostInteractedRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckPostInteractedResponse) => void,
  ): ClientUnaryCall;
  addPostComment(
    request: AddPostCommentRequest,
    callback: (error: ServiceError | null, response: AddPostCommentResponse) => void,
  ): ClientUnaryCall;
  addPostComment(
    request: AddPostCommentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddPostCommentResponse) => void,
  ): ClientUnaryCall;
  addPostComment(
    request: AddPostCommentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddPostCommentResponse) => void,
  ): ClientUnaryCall;
}

export const PostClient = makeGenericClientConstructor(PostService, "pb.Post") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PostClient;
  service: typeof PostService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
