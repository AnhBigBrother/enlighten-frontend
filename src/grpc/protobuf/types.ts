// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pb";

export enum Voted {
  UP = 0,
  DOWN = 1,
  UNRECOGNIZED = -1,
}

export function votedFromJSON(object: any): Voted {
  switch (object) {
    case 0:
    case "UP":
      return Voted.UP;
    case 1:
    case "DOWN":
      return Voted.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Voted.UNRECOGNIZED;
  }
}

export function votedToJSON(object: Voted): string {
  switch (object) {
    case Voted.UP:
      return "UP";
    case Voted.DOWN:
      return "DOWN";
    case Voted.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UserBaseInfo {
  id: string;
  name: string;
  email: string;
  image: string;
}

export interface PostData {
  id: string;
  title: string;
  content: string;
  author: UserBaseInfo | undefined;
  upvote: number;
  downvote: number;
  comments: number;
  created_at: number;
  updated_at: number;
}

export interface CommentData {
  id: string;
  comment: string;
  author: UserBaseInfo | undefined;
  post_id: string;
  parent_comment_id: string;
  upvote: number;
  downvote: number;
  created_at: number;
}

function createBaseUserBaseInfo(): UserBaseInfo {
  return { id: "", name: "", email: "", image: "" };
}

export const UserBaseInfo: MessageFns<UserBaseInfo> = {
  encode(message: UserBaseInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserBaseInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserBaseInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserBaseInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: UserBaseInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserBaseInfo>, I>>(base?: I): UserBaseInfo {
    return UserBaseInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserBaseInfo>, I>>(object: I): UserBaseInfo {
    const message = createBaseUserBaseInfo();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBasePostData(): PostData {
  return {
    id: "",
    title: "",
    content: "",
    author: undefined,
    upvote: 0,
    downvote: 0,
    comments: 0,
    created_at: 0,
    updated_at: 0,
  };
}

export const PostData: MessageFns<PostData> = {
  encode(message: PostData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.author !== undefined) {
      UserBaseInfo.encode(message.author, writer.uint32(34).fork()).join();
    }
    if (message.upvote !== 0) {
      writer.uint32(40).uint32(message.upvote);
    }
    if (message.downvote !== 0) {
      writer.uint32(48).uint32(message.downvote);
    }
    if (message.comments !== 0) {
      writer.uint32(56).uint32(message.comments);
    }
    if (message.created_at !== 0) {
      writer.uint32(64).uint64(message.created_at);
    }
    if (message.updated_at !== 0) {
      writer.uint32(72).uint64(message.updated_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.author = UserBaseInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.upvote = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.downvote = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.comments = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.updated_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      author: isSet(object.author) ? UserBaseInfo.fromJSON(object.author) : undefined,
      upvote: isSet(object.upvote) ? globalThis.Number(object.upvote) : 0,
      downvote: isSet(object.downvote) ? globalThis.Number(object.downvote) : 0,
      comments: isSet(object.comments) ? globalThis.Number(object.comments) : 0,
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
      updated_at: isSet(object.updated_at) ? globalThis.Number(object.updated_at) : 0,
    };
  },

  toJSON(message: PostData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.author !== undefined) {
      obj.author = UserBaseInfo.toJSON(message.author);
    }
    if (message.upvote !== 0) {
      obj.upvote = Math.round(message.upvote);
    }
    if (message.downvote !== 0) {
      obj.downvote = Math.round(message.downvote);
    }
    if (message.comments !== 0) {
      obj.comments = Math.round(message.comments);
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    if (message.updated_at !== 0) {
      obj.updated_at = Math.round(message.updated_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostData>, I>>(base?: I): PostData {
    return PostData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostData>, I>>(object: I): PostData {
    const message = createBasePostData();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.author = (object.author !== undefined && object.author !== null)
      ? UserBaseInfo.fromPartial(object.author)
      : undefined;
    message.upvote = object.upvote ?? 0;
    message.downvote = object.downvote ?? 0;
    message.comments = object.comments ?? 0;
    message.created_at = object.created_at ?? 0;
    message.updated_at = object.updated_at ?? 0;
    return message;
  },
};

function createBaseCommentData(): CommentData {
  return {
    id: "",
    comment: "",
    author: undefined,
    post_id: "",
    parent_comment_id: "",
    upvote: 0,
    downvote: 0,
    created_at: 0,
  };
}

export const CommentData: MessageFns<CommentData> = {
  encode(message: CommentData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.comment !== "") {
      writer.uint32(18).string(message.comment);
    }
    if (message.author !== undefined) {
      UserBaseInfo.encode(message.author, writer.uint32(26).fork()).join();
    }
    if (message.post_id !== "") {
      writer.uint32(34).string(message.post_id);
    }
    if (message.parent_comment_id !== "") {
      writer.uint32(42).string(message.parent_comment_id);
    }
    if (message.upvote !== 0) {
      writer.uint32(48).uint32(message.upvote);
    }
    if (message.downvote !== 0) {
      writer.uint32(56).uint32(message.downvote);
    }
    if (message.created_at !== 0) {
      writer.uint32(64).uint64(message.created_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommentData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommentData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author = UserBaseInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parent_comment_id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.upvote = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.downvote = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommentData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      author: isSet(object.author) ? UserBaseInfo.fromJSON(object.author) : undefined,
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      parent_comment_id: isSet(object.parent_comment_id) ? globalThis.String(object.parent_comment_id) : "",
      upvote: isSet(object.upvote) ? globalThis.Number(object.upvote) : 0,
      downvote: isSet(object.downvote) ? globalThis.Number(object.downvote) : 0,
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
    };
  },

  toJSON(message: CommentData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.author !== undefined) {
      obj.author = UserBaseInfo.toJSON(message.author);
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.parent_comment_id !== "") {
      obj.parent_comment_id = message.parent_comment_id;
    }
    if (message.upvote !== 0) {
      obj.upvote = Math.round(message.upvote);
    }
    if (message.downvote !== 0) {
      obj.downvote = Math.round(message.downvote);
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommentData>, I>>(base?: I): CommentData {
    return CommentData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommentData>, I>>(object: I): CommentData {
    const message = createBaseCommentData();
    message.id = object.id ?? "";
    message.comment = object.comment ?? "";
    message.author = (object.author !== undefined && object.author !== null)
      ? UserBaseInfo.fromPartial(object.author)
      : undefined;
    message.post_id = object.post_id ?? "";
    message.parent_comment_id = object.parent_comment_id ?? "";
    message.upvote = object.upvote ?? 0;
    message.downvote = object.downvote ?? 0;
    message.created_at = object.created_at ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
