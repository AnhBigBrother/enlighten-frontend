// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: comment_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Voted, votedFromJSON, votedToJSON } from "./types";

export const protobufPackage = "pb";

export interface UpVoteCommentRequest {
  access_token: string;
  comment_id: string;
}

export interface UpVoteCommentResponse {
  message: string;
}

export interface DownVoteCommentRequest {
  access_token: string;
  comment_id: string;
}

export interface DownVoteCommentResponse {
  message: string;
}

export interface CheckCommentInteractedRequest {
  access_token: string;
  comment_id: string;
}

export interface CheckCommentInteractedResponse {
  voted: Voted;
}

export interface ReplyCommentRequest {
  access_token: string;
  post_id: string;
  comment_id: string;
  reply_body: string;
}

export interface ReplyCommentResponse {
  created: ReplyCommentResponse_CreatedReply | undefined;
}

export interface ReplyCommentResponse_CreatedReply {
  id: string;
  reply: string;
  author_id: string;
  post_id: string;
  parent_comment_id: string;
  created_at: number;
}

function createBaseUpVoteCommentRequest(): UpVoteCommentRequest {
  return { access_token: "", comment_id: "" };
}

export const UpVoteCommentRequest: MessageFns<UpVoteCommentRequest> = {
  encode(message: UpVoteCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.comment_id !== "") {
      writer.uint32(18).string(message.comment_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpVoteCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpVoteCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpVoteCommentRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      comment_id: isSet(object.comment_id) ? globalThis.String(object.comment_id) : "",
    };
  },

  toJSON(message: UpVoteCommentRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.comment_id !== "") {
      obj.comment_id = message.comment_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpVoteCommentRequest>, I>>(base?: I): UpVoteCommentRequest {
    return UpVoteCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpVoteCommentRequest>, I>>(object: I): UpVoteCommentRequest {
    const message = createBaseUpVoteCommentRequest();
    message.access_token = object.access_token ?? "";
    message.comment_id = object.comment_id ?? "";
    return message;
  },
};

function createBaseUpVoteCommentResponse(): UpVoteCommentResponse {
  return { message: "" };
}

export const UpVoteCommentResponse: MessageFns<UpVoteCommentResponse> = {
  encode(message: UpVoteCommentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpVoteCommentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpVoteCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpVoteCommentResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UpVoteCommentResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpVoteCommentResponse>, I>>(base?: I): UpVoteCommentResponse {
    return UpVoteCommentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpVoteCommentResponse>, I>>(object: I): UpVoteCommentResponse {
    const message = createBaseUpVoteCommentResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseDownVoteCommentRequest(): DownVoteCommentRequest {
  return { access_token: "", comment_id: "" };
}

export const DownVoteCommentRequest: MessageFns<DownVoteCommentRequest> = {
  encode(message: DownVoteCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.comment_id !== "") {
      writer.uint32(18).string(message.comment_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownVoteCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownVoteCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownVoteCommentRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      comment_id: isSet(object.comment_id) ? globalThis.String(object.comment_id) : "",
    };
  },

  toJSON(message: DownVoteCommentRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.comment_id !== "") {
      obj.comment_id = message.comment_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownVoteCommentRequest>, I>>(base?: I): DownVoteCommentRequest {
    return DownVoteCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownVoteCommentRequest>, I>>(object: I): DownVoteCommentRequest {
    const message = createBaseDownVoteCommentRequest();
    message.access_token = object.access_token ?? "";
    message.comment_id = object.comment_id ?? "";
    return message;
  },
};

function createBaseDownVoteCommentResponse(): DownVoteCommentResponse {
  return { message: "" };
}

export const DownVoteCommentResponse: MessageFns<DownVoteCommentResponse> = {
  encode(message: DownVoteCommentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownVoteCommentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownVoteCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownVoteCommentResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: DownVoteCommentResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownVoteCommentResponse>, I>>(base?: I): DownVoteCommentResponse {
    return DownVoteCommentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownVoteCommentResponse>, I>>(object: I): DownVoteCommentResponse {
    const message = createBaseDownVoteCommentResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCheckCommentInteractedRequest(): CheckCommentInteractedRequest {
  return { access_token: "", comment_id: "" };
}

export const CheckCommentInteractedRequest: MessageFns<CheckCommentInteractedRequest> = {
  encode(message: CheckCommentInteractedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.comment_id !== "") {
      writer.uint32(18).string(message.comment_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckCommentInteractedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckCommentInteractedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckCommentInteractedRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      comment_id: isSet(object.comment_id) ? globalThis.String(object.comment_id) : "",
    };
  },

  toJSON(message: CheckCommentInteractedRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.comment_id !== "") {
      obj.comment_id = message.comment_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckCommentInteractedRequest>, I>>(base?: I): CheckCommentInteractedRequest {
    return CheckCommentInteractedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckCommentInteractedRequest>, I>>(
    object: I,
  ): CheckCommentInteractedRequest {
    const message = createBaseCheckCommentInteractedRequest();
    message.access_token = object.access_token ?? "";
    message.comment_id = object.comment_id ?? "";
    return message;
  },
};

function createBaseCheckCommentInteractedResponse(): CheckCommentInteractedResponse {
  return { voted: 0 };
}

export const CheckCommentInteractedResponse: MessageFns<CheckCommentInteractedResponse> = {
  encode(message: CheckCommentInteractedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voted !== 0) {
      writer.uint32(8).int32(message.voted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckCommentInteractedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckCommentInteractedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.voted = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckCommentInteractedResponse {
    return { voted: isSet(object.voted) ? votedFromJSON(object.voted) : 0 };
  },

  toJSON(message: CheckCommentInteractedResponse): unknown {
    const obj: any = {};
    if (message.voted !== 0) {
      obj.voted = votedToJSON(message.voted);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckCommentInteractedResponse>, I>>(base?: I): CheckCommentInteractedResponse {
    return CheckCommentInteractedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckCommentInteractedResponse>, I>>(
    object: I,
  ): CheckCommentInteractedResponse {
    const message = createBaseCheckCommentInteractedResponse();
    message.voted = object.voted ?? 0;
    return message;
  },
};

function createBaseReplyCommentRequest(): ReplyCommentRequest {
  return { access_token: "", post_id: "", comment_id: "", reply_body: "" };
}

export const ReplyCommentRequest: MessageFns<ReplyCommentRequest> = {
  encode(message: ReplyCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.post_id !== "") {
      writer.uint32(18).string(message.post_id);
    }
    if (message.comment_id !== "") {
      writer.uint32(26).string(message.comment_id);
    }
    if (message.reply_body !== "") {
      writer.uint32(34).string(message.reply_body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplyCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplyCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.comment_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reply_body = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplyCommentRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      comment_id: isSet(object.comment_id) ? globalThis.String(object.comment_id) : "",
      reply_body: isSet(object.reply_body) ? globalThis.String(object.reply_body) : "",
    };
  },

  toJSON(message: ReplyCommentRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.comment_id !== "") {
      obj.comment_id = message.comment_id;
    }
    if (message.reply_body !== "") {
      obj.reply_body = message.reply_body;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplyCommentRequest>, I>>(base?: I): ReplyCommentRequest {
    return ReplyCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplyCommentRequest>, I>>(object: I): ReplyCommentRequest {
    const message = createBaseReplyCommentRequest();
    message.access_token = object.access_token ?? "";
    message.post_id = object.post_id ?? "";
    message.comment_id = object.comment_id ?? "";
    message.reply_body = object.reply_body ?? "";
    return message;
  },
};

function createBaseReplyCommentResponse(): ReplyCommentResponse {
  return { created: undefined };
}

export const ReplyCommentResponse: MessageFns<ReplyCommentResponse> = {
  encode(message: ReplyCommentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.created !== undefined) {
      ReplyCommentResponse_CreatedReply.encode(message.created, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplyCommentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplyCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.created = ReplyCommentResponse_CreatedReply.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplyCommentResponse {
    return { created: isSet(object.created) ? ReplyCommentResponse_CreatedReply.fromJSON(object.created) : undefined };
  },

  toJSON(message: ReplyCommentResponse): unknown {
    const obj: any = {};
    if (message.created !== undefined) {
      obj.created = ReplyCommentResponse_CreatedReply.toJSON(message.created);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplyCommentResponse>, I>>(base?: I): ReplyCommentResponse {
    return ReplyCommentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplyCommentResponse>, I>>(object: I): ReplyCommentResponse {
    const message = createBaseReplyCommentResponse();
    message.created = (object.created !== undefined && object.created !== null)
      ? ReplyCommentResponse_CreatedReply.fromPartial(object.created)
      : undefined;
    return message;
  },
};

function createBaseReplyCommentResponse_CreatedReply(): ReplyCommentResponse_CreatedReply {
  return { id: "", reply: "", author_id: "", post_id: "", parent_comment_id: "", created_at: 0 };
}

export const ReplyCommentResponse_CreatedReply: MessageFns<ReplyCommentResponse_CreatedReply> = {
  encode(message: ReplyCommentResponse_CreatedReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.reply !== "") {
      writer.uint32(18).string(message.reply);
    }
    if (message.author_id !== "") {
      writer.uint32(26).string(message.author_id);
    }
    if (message.post_id !== "") {
      writer.uint32(34).string(message.post_id);
    }
    if (message.parent_comment_id !== "") {
      writer.uint32(42).string(message.parent_comment_id);
    }
    if (message.created_at !== 0) {
      writer.uint32(48).uint64(message.created_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplyCommentResponse_CreatedReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplyCommentResponse_CreatedReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reply = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.post_id = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parent_comment_id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplyCommentResponse_CreatedReply {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      reply: isSet(object.reply) ? globalThis.String(object.reply) : "",
      author_id: isSet(object.author_id) ? globalThis.String(object.author_id) : "",
      post_id: isSet(object.post_id) ? globalThis.String(object.post_id) : "",
      parent_comment_id: isSet(object.parent_comment_id) ? globalThis.String(object.parent_comment_id) : "",
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
    };
  },

  toJSON(message: ReplyCommentResponse_CreatedReply): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.reply !== "") {
      obj.reply = message.reply;
    }
    if (message.author_id !== "") {
      obj.author_id = message.author_id;
    }
    if (message.post_id !== "") {
      obj.post_id = message.post_id;
    }
    if (message.parent_comment_id !== "") {
      obj.parent_comment_id = message.parent_comment_id;
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplyCommentResponse_CreatedReply>, I>>(
    base?: I,
  ): ReplyCommentResponse_CreatedReply {
    return ReplyCommentResponse_CreatedReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplyCommentResponse_CreatedReply>, I>>(
    object: I,
  ): ReplyCommentResponse_CreatedReply {
    const message = createBaseReplyCommentResponse_CreatedReply();
    message.id = object.id ?? "";
    message.reply = object.reply ?? "";
    message.author_id = object.author_id ?? "";
    message.post_id = object.post_id ?? "";
    message.parent_comment_id = object.parent_comment_id ?? "";
    message.created_at = object.created_at ?? 0;
    return message;
  },
};

export type CommentService = typeof CommentService;
export const CommentService = {
  upVoteComment: {
    path: "/pb.Comment/UpVoteComment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpVoteCommentRequest) => Buffer.from(UpVoteCommentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpVoteCommentRequest.decode(value),
    responseSerialize: (value: UpVoteCommentResponse) => Buffer.from(UpVoteCommentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpVoteCommentResponse.decode(value),
  },
  downVoteComment: {
    path: "/pb.Comment/DownVoteComment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DownVoteCommentRequest) => Buffer.from(DownVoteCommentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DownVoteCommentRequest.decode(value),
    responseSerialize: (value: DownVoteCommentResponse) => Buffer.from(DownVoteCommentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DownVoteCommentResponse.decode(value),
  },
  checkCommentInteracted: {
    path: "/pb.Comment/CheckCommentInteracted",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckCommentInteractedRequest) =>
      Buffer.from(CheckCommentInteractedRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckCommentInteractedRequest.decode(value),
    responseSerialize: (value: CheckCommentInteractedResponse) =>
      Buffer.from(CheckCommentInteractedResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckCommentInteractedResponse.decode(value),
  },
  replyComment: {
    path: "/pb.Comment/ReplyComment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReplyCommentRequest) => Buffer.from(ReplyCommentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ReplyCommentRequest.decode(value),
    responseSerialize: (value: ReplyCommentResponse) => Buffer.from(ReplyCommentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ReplyCommentResponse.decode(value),
  },
} as const;

export interface CommentServer extends UntypedServiceImplementation {
  upVoteComment: handleUnaryCall<UpVoteCommentRequest, UpVoteCommentResponse>;
  downVoteComment: handleUnaryCall<DownVoteCommentRequest, DownVoteCommentResponse>;
  checkCommentInteracted: handleUnaryCall<CheckCommentInteractedRequest, CheckCommentInteractedResponse>;
  replyComment: handleUnaryCall<ReplyCommentRequest, ReplyCommentResponse>;
}

export interface CommentClient extends Client {
  upVoteComment(
    request: UpVoteCommentRequest,
    callback: (error: ServiceError | null, response: UpVoteCommentResponse) => void,
  ): ClientUnaryCall;
  upVoteComment(
    request: UpVoteCommentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpVoteCommentResponse) => void,
  ): ClientUnaryCall;
  upVoteComment(
    request: UpVoteCommentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpVoteCommentResponse) => void,
  ): ClientUnaryCall;
  downVoteComment(
    request: DownVoteCommentRequest,
    callback: (error: ServiceError | null, response: DownVoteCommentResponse) => void,
  ): ClientUnaryCall;
  downVoteComment(
    request: DownVoteCommentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DownVoteCommentResponse) => void,
  ): ClientUnaryCall;
  downVoteComment(
    request: DownVoteCommentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DownVoteCommentResponse) => void,
  ): ClientUnaryCall;
  checkCommentInteracted(
    request: CheckCommentInteractedRequest,
    callback: (error: ServiceError | null, response: CheckCommentInteractedResponse) => void,
  ): ClientUnaryCall;
  checkCommentInteracted(
    request: CheckCommentInteractedRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckCommentInteractedResponse) => void,
  ): ClientUnaryCall;
  checkCommentInteracted(
    request: CheckCommentInteractedRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckCommentInteractedResponse) => void,
  ): ClientUnaryCall;
  replyComment(
    request: ReplyCommentRequest,
    callback: (error: ServiceError | null, response: ReplyCommentResponse) => void,
  ): ClientUnaryCall;
  replyComment(
    request: ReplyCommentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReplyCommentResponse) => void,
  ): ClientUnaryCall;
  replyComment(
    request: ReplyCommentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReplyCommentResponse) => void,
  ): ClientUnaryCall;
}

export const CommentClient = makeGenericClientConstructor(CommentService, "pb.Comment") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CommentClient;
  service: typeof CommentService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
