// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: user_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { PostData, UserBaseInfo } from "./types";

export const protobufPackage = "pb";

export interface SignOutRequest {
  refresh_token: string;
}

export interface SignOutResponse {
  message: string;
}

export interface UpdateMeRequest {
  name: string;
  password: string;
  image: string;
  bio: string;
}

export interface UpdateMeResponse {
  access_token: string;
  refresh_token: string;
}

export interface GetMeRequest {
  access_token: string;
}

export interface GetMeResponse {
  id: string;
  email: string;
  name: string;
  image: string;
  bio: string;
  refresh_token: string;
  created_at: number;
  updateMed_at: number;
}

export interface GetSessionRequest {
  access_token: string;
}

export interface GetSessionResponse {
  jti: string;
  sub: string;
  exp: number;
  iat: number;
  email: string;
  name: string;
  image: string;
}

export interface GetMyOverviewRequest {
  access_token: string;
}

export interface GetMyOverviewResponse {
  id: string;
  name: string;
  email: string;
  image: string;
  bio: string;
  total_posts: number;
  total_upvote: number;
  total_downvote: number;
  follower: number;
  following: number;
  created_at: number;
  updated_at: number;
}

export interface GetMyPostRequest {
  access_token: string;
  sort: string;
  limit: number;
  offset: number;
}

export interface GetMyPostResponse {
  posts: PostData[];
}

export interface FollowUserRequest {
  user_id: string;
  access_token: string;
}

export interface FollowUserResponse {
  message: string;
}

export interface UnFollowUserRequest {
  user_id: string;
  access_token: string;
}

export interface UnFollowUserResponse {
  message: string;
}

export interface CheckUserFollowedRequest {
  user_id: string;
  access_token: string;
}

export interface CheckUserFollowedResponse {
  follow_id: string;
  created_at: number;
}

export interface GetFollowedUsersRequest {
  access_token: string;
  limit: number;
  offset: number;
}

export interface GetFollowedUsersResponse {
  followed: UserBaseInfo[];
}

function createBaseSignOutRequest(): SignOutRequest {
  return { refresh_token: "" };
}

export const SignOutRequest: MessageFns<SignOutRequest> = {
  encode(message: SignOutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refresh_token !== "") {
      writer.uint32(10).string(message.refresh_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignOutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignOutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignOutRequest {
    return { refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "" };
  },

  toJSON(message: SignOutRequest): unknown {
    const obj: any = {};
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignOutRequest>, I>>(base?: I): SignOutRequest {
    return SignOutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignOutRequest>, I>>(object: I): SignOutRequest {
    const message = createBaseSignOutRequest();
    message.refresh_token = object.refresh_token ?? "";
    return message;
  },
};

function createBaseSignOutResponse(): SignOutResponse {
  return { message: "" };
}

export const SignOutResponse: MessageFns<SignOutResponse> = {
  encode(message: SignOutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignOutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignOutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignOutResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: SignOutResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignOutResponse>, I>>(base?: I): SignOutResponse {
    return SignOutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignOutResponse>, I>>(object: I): SignOutResponse {
    const message = createBaseSignOutResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUpdateMeRequest(): UpdateMeRequest {
  return { name: "", password: "", image: "", bio: "" };
}

export const UpdateMeRequest: MessageFns<UpdateMeRequest> = {
  encode(message: UpdateMeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    if (message.bio !== "") {
      writer.uint32(34).string(message.bio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
    };
  },

  toJSON(message: UpdateMeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMeRequest>, I>>(base?: I): UpdateMeRequest {
    return UpdateMeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMeRequest>, I>>(object: I): UpdateMeRequest {
    const message = createBaseUpdateMeRequest();
    message.name = object.name ?? "";
    message.password = object.password ?? "";
    message.image = object.image ?? "";
    message.bio = object.bio ?? "";
    return message;
  },
};

function createBaseUpdateMeResponse(): UpdateMeResponse {
  return { access_token: "", refresh_token: "" };
}

export const UpdateMeResponse: MessageFns<UpdateMeResponse> = {
  encode(message: UpdateMeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMeResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
    };
  },

  toJSON(message: UpdateMeResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMeResponse>, I>>(base?: I): UpdateMeResponse {
    return UpdateMeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMeResponse>, I>>(object: I): UpdateMeResponse {
    const message = createBaseUpdateMeResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    return message;
  },
};

function createBaseGetMeRequest(): GetMeRequest {
  return { access_token: "" };
}

export const GetMeRequest: MessageFns<GetMeRequest> = {
  encode(message: GetMeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMeRequest {
    return { access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "" };
  },

  toJSON(message: GetMeRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeRequest>, I>>(base?: I): GetMeRequest {
    return GetMeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeRequest>, I>>(object: I): GetMeRequest {
    const message = createBaseGetMeRequest();
    message.access_token = object.access_token ?? "";
    return message;
  },
};

function createBaseGetMeResponse(): GetMeResponse {
  return { id: "", email: "", name: "", image: "", bio: "", refresh_token: "", created_at: 0, updateMed_at: 0 };
}

export const GetMeResponse: MessageFns<GetMeResponse> = {
  encode(message: GetMeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.refresh_token !== "") {
      writer.uint32(50).string(message.refresh_token);
    }
    if (message.created_at !== 0) {
      writer.uint32(56).uint64(message.created_at);
    }
    if (message.updateMed_at !== 0) {
      writer.uint32(64).uint64(message.updateMed_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.updateMed_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMeResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
      updateMed_at: isSet(object.updateMed_at) ? globalThis.Number(object.updateMed_at) : 0,
    };
  },

  toJSON(message: GetMeResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    if (message.updateMed_at !== 0) {
      obj.updateMed_at = Math.round(message.updateMed_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeResponse>, I>>(base?: I): GetMeResponse {
    return GetMeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeResponse>, I>>(object: I): GetMeResponse {
    const message = createBaseGetMeResponse();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.image = object.image ?? "";
    message.bio = object.bio ?? "";
    message.refresh_token = object.refresh_token ?? "";
    message.created_at = object.created_at ?? 0;
    message.updateMed_at = object.updateMed_at ?? 0;
    return message;
  },
};

function createBaseGetSessionRequest(): GetSessionRequest {
  return { access_token: "" };
}

export const GetSessionRequest: MessageFns<GetSessionRequest> = {
  encode(message: GetSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionRequest {
    return { access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "" };
  },

  toJSON(message: GetSessionRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSessionRequest>, I>>(base?: I): GetSessionRequest {
    return GetSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSessionRequest>, I>>(object: I): GetSessionRequest {
    const message = createBaseGetSessionRequest();
    message.access_token = object.access_token ?? "";
    return message;
  },
};

function createBaseGetSessionResponse(): GetSessionResponse {
  return { jti: "", sub: "", exp: 0, iat: 0, email: "", name: "", image: "" };
}

export const GetSessionResponse: MessageFns<GetSessionResponse> = {
  encode(message: GetSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jti !== "") {
      writer.uint32(10).string(message.jti);
    }
    if (message.sub !== "") {
      writer.uint32(18).string(message.sub);
    }
    if (message.exp !== 0) {
      writer.uint32(24).uint64(message.exp);
    }
    if (message.iat !== 0) {
      writer.uint32(32).uint64(message.iat);
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.image !== "") {
      writer.uint32(58).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jti = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sub = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.exp = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.iat = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionResponse {
    return {
      jti: isSet(object.jti) ? globalThis.String(object.jti) : "",
      sub: isSet(object.sub) ? globalThis.String(object.sub) : "",
      exp: isSet(object.exp) ? globalThis.Number(object.exp) : 0,
      iat: isSet(object.iat) ? globalThis.Number(object.iat) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: GetSessionResponse): unknown {
    const obj: any = {};
    if (message.jti !== "") {
      obj.jti = message.jti;
    }
    if (message.sub !== "") {
      obj.sub = message.sub;
    }
    if (message.exp !== 0) {
      obj.exp = Math.round(message.exp);
    }
    if (message.iat !== 0) {
      obj.iat = Math.round(message.iat);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSessionResponse>, I>>(base?: I): GetSessionResponse {
    return GetSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSessionResponse>, I>>(object: I): GetSessionResponse {
    const message = createBaseGetSessionResponse();
    message.jti = object.jti ?? "";
    message.sub = object.sub ?? "";
    message.exp = object.exp ?? 0;
    message.iat = object.iat ?? 0;
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseGetMyOverviewRequest(): GetMyOverviewRequest {
  return { access_token: "" };
}

export const GetMyOverviewRequest: MessageFns<GetMyOverviewRequest> = {
  encode(message: GetMyOverviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMyOverviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyOverviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyOverviewRequest {
    return { access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "" };
  },

  toJSON(message: GetMyOverviewRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyOverviewRequest>, I>>(base?: I): GetMyOverviewRequest {
    return GetMyOverviewRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyOverviewRequest>, I>>(object: I): GetMyOverviewRequest {
    const message = createBaseGetMyOverviewRequest();
    message.access_token = object.access_token ?? "";
    return message;
  },
};

function createBaseGetMyOverviewResponse(): GetMyOverviewResponse {
  return {
    id: "",
    name: "",
    email: "",
    image: "",
    bio: "",
    total_posts: 0,
    total_upvote: 0,
    total_downvote: 0,
    follower: 0,
    following: 0,
    created_at: 0,
    updated_at: 0,
  };
}

export const GetMyOverviewResponse: MessageFns<GetMyOverviewResponse> = {
  encode(message: GetMyOverviewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.total_posts !== 0) {
      writer.uint32(48).uint32(message.total_posts);
    }
    if (message.total_upvote !== 0) {
      writer.uint32(56).uint32(message.total_upvote);
    }
    if (message.total_downvote !== 0) {
      writer.uint32(64).uint32(message.total_downvote);
    }
    if (message.follower !== 0) {
      writer.uint32(72).uint32(message.follower);
    }
    if (message.following !== 0) {
      writer.uint32(80).uint32(message.following);
    }
    if (message.created_at !== 0) {
      writer.uint32(88).uint64(message.created_at);
    }
    if (message.updated_at !== 0) {
      writer.uint32(96).uint64(message.updated_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMyOverviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyOverviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.total_posts = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.total_upvote = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.total_downvote = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.follower = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.following = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.updated_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyOverviewResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      total_posts: isSet(object.total_posts) ? globalThis.Number(object.total_posts) : 0,
      total_upvote: isSet(object.total_upvote) ? globalThis.Number(object.total_upvote) : 0,
      total_downvote: isSet(object.total_downvote) ? globalThis.Number(object.total_downvote) : 0,
      follower: isSet(object.follower) ? globalThis.Number(object.follower) : 0,
      following: isSet(object.following) ? globalThis.Number(object.following) : 0,
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
      updated_at: isSet(object.updated_at) ? globalThis.Number(object.updated_at) : 0,
    };
  },

  toJSON(message: GetMyOverviewResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.total_posts !== 0) {
      obj.total_posts = Math.round(message.total_posts);
    }
    if (message.total_upvote !== 0) {
      obj.total_upvote = Math.round(message.total_upvote);
    }
    if (message.total_downvote !== 0) {
      obj.total_downvote = Math.round(message.total_downvote);
    }
    if (message.follower !== 0) {
      obj.follower = Math.round(message.follower);
    }
    if (message.following !== 0) {
      obj.following = Math.round(message.following);
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    if (message.updated_at !== 0) {
      obj.updated_at = Math.round(message.updated_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyOverviewResponse>, I>>(base?: I): GetMyOverviewResponse {
    return GetMyOverviewResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyOverviewResponse>, I>>(object: I): GetMyOverviewResponse {
    const message = createBaseGetMyOverviewResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.image = object.image ?? "";
    message.bio = object.bio ?? "";
    message.total_posts = object.total_posts ?? 0;
    message.total_upvote = object.total_upvote ?? 0;
    message.total_downvote = object.total_downvote ?? 0;
    message.follower = object.follower ?? 0;
    message.following = object.following ?? 0;
    message.created_at = object.created_at ?? 0;
    message.updated_at = object.updated_at ?? 0;
    return message;
  },
};

function createBaseGetMyPostRequest(): GetMyPostRequest {
  return { access_token: "", sort: "", limit: 0, offset: 0 };
}

export const GetMyPostRequest: MessageFns<GetMyPostRequest> = {
  encode(message: GetMyPostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.sort !== "") {
      writer.uint32(18).string(message.sort);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(32).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMyPostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyPostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sort = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyPostRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      sort: isSet(object.sort) ? globalThis.String(object.sort) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetMyPostRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.sort !== "") {
      obj.sort = message.sort;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyPostRequest>, I>>(base?: I): GetMyPostRequest {
    return GetMyPostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyPostRequest>, I>>(object: I): GetMyPostRequest {
    const message = createBaseGetMyPostRequest();
    message.access_token = object.access_token ?? "";
    message.sort = object.sort ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetMyPostResponse(): GetMyPostResponse {
  return { posts: [] };
}

export const GetMyPostResponse: MessageFns<GetMyPostResponse> = {
  encode(message: GetMyPostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMyPostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyPostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyPostResponse {
    return { posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostData.fromJSON(e)) : [] };
  },

  toJSON(message: GetMyPostResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMyPostResponse>, I>>(base?: I): GetMyPostResponse {
    return GetMyPostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMyPostResponse>, I>>(object: I): GetMyPostResponse {
    const message = createBaseGetMyPostResponse();
    message.posts = object.posts?.map((e) => PostData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFollowUserRequest(): FollowUserRequest {
  return { user_id: "", access_token: "" };
}

export const FollowUserRequest: MessageFns<FollowUserRequest> = {
  encode(message: FollowUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.access_token !== "") {
      writer.uint32(18).string(message.access_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FollowUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowUserRequest {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
    };
  },

  toJSON(message: FollowUserRequest): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowUserRequest>, I>>(base?: I): FollowUserRequest {
    return FollowUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowUserRequest>, I>>(object: I): FollowUserRequest {
    const message = createBaseFollowUserRequest();
    message.user_id = object.user_id ?? "";
    message.access_token = object.access_token ?? "";
    return message;
  },
};

function createBaseFollowUserResponse(): FollowUserResponse {
  return { message: "" };
}

export const FollowUserResponse: MessageFns<FollowUserResponse> = {
  encode(message: FollowUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FollowUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowUserResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: FollowUserResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowUserResponse>, I>>(base?: I): FollowUserResponse {
    return FollowUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowUserResponse>, I>>(object: I): FollowUserResponse {
    const message = createBaseFollowUserResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUnFollowUserRequest(): UnFollowUserRequest {
  return { user_id: "", access_token: "" };
}

export const UnFollowUserRequest: MessageFns<UnFollowUserRequest> = {
  encode(message: UnFollowUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.access_token !== "") {
      writer.uint32(18).string(message.access_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnFollowUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnFollowUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnFollowUserRequest {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
    };
  },

  toJSON(message: UnFollowUserRequest): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnFollowUserRequest>, I>>(base?: I): UnFollowUserRequest {
    return UnFollowUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnFollowUserRequest>, I>>(object: I): UnFollowUserRequest {
    const message = createBaseUnFollowUserRequest();
    message.user_id = object.user_id ?? "";
    message.access_token = object.access_token ?? "";
    return message;
  },
};

function createBaseUnFollowUserResponse(): UnFollowUserResponse {
  return { message: "" };
}

export const UnFollowUserResponse: MessageFns<UnFollowUserResponse> = {
  encode(message: UnFollowUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnFollowUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnFollowUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnFollowUserResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UnFollowUserResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnFollowUserResponse>, I>>(base?: I): UnFollowUserResponse {
    return UnFollowUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnFollowUserResponse>, I>>(object: I): UnFollowUserResponse {
    const message = createBaseUnFollowUserResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCheckUserFollowedRequest(): CheckUserFollowedRequest {
  return { user_id: "", access_token: "" };
}

export const CheckUserFollowedRequest: MessageFns<CheckUserFollowedRequest> = {
  encode(message: CheckUserFollowedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== "") {
      writer.uint32(10).string(message.user_id);
    }
    if (message.access_token !== "") {
      writer.uint32(18).string(message.access_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUserFollowedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUserFollowedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckUserFollowedRequest {
    return {
      user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
    };
  },

  toJSON(message: CheckUserFollowedRequest): unknown {
    const obj: any = {};
    if (message.user_id !== "") {
      obj.user_id = message.user_id;
    }
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckUserFollowedRequest>, I>>(base?: I): CheckUserFollowedRequest {
    return CheckUserFollowedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckUserFollowedRequest>, I>>(object: I): CheckUserFollowedRequest {
    const message = createBaseCheckUserFollowedRequest();
    message.user_id = object.user_id ?? "";
    message.access_token = object.access_token ?? "";
    return message;
  },
};

function createBaseCheckUserFollowedResponse(): CheckUserFollowedResponse {
  return { follow_id: "", created_at: 0 };
}

export const CheckUserFollowedResponse: MessageFns<CheckUserFollowedResponse> = {
  encode(message: CheckUserFollowedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.follow_id !== "") {
      writer.uint32(10).string(message.follow_id);
    }
    if (message.created_at !== 0) {
      writer.uint32(16).uint64(message.created_at);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUserFollowedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUserFollowedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.follow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.created_at = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckUserFollowedResponse {
    return {
      follow_id: isSet(object.follow_id) ? globalThis.String(object.follow_id) : "",
      created_at: isSet(object.created_at) ? globalThis.Number(object.created_at) : 0,
    };
  },

  toJSON(message: CheckUserFollowedResponse): unknown {
    const obj: any = {};
    if (message.follow_id !== "") {
      obj.follow_id = message.follow_id;
    }
    if (message.created_at !== 0) {
      obj.created_at = Math.round(message.created_at);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckUserFollowedResponse>, I>>(base?: I): CheckUserFollowedResponse {
    return CheckUserFollowedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckUserFollowedResponse>, I>>(object: I): CheckUserFollowedResponse {
    const message = createBaseCheckUserFollowedResponse();
    message.follow_id = object.follow_id ?? "";
    message.created_at = object.created_at ?? 0;
    return message;
  },
};

function createBaseGetFollowedUsersRequest(): GetFollowedUsersRequest {
  return { access_token: "", limit: 0, offset: 0 };
}

export const GetFollowedUsersRequest: MessageFns<GetFollowedUsersRequest> = {
  encode(message: GetFollowedUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).uint32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFollowedUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFollowedUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFollowedUsersRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: GetFollowedUsersRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFollowedUsersRequest>, I>>(base?: I): GetFollowedUsersRequest {
    return GetFollowedUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFollowedUsersRequest>, I>>(object: I): GetFollowedUsersRequest {
    const message = createBaseGetFollowedUsersRequest();
    message.access_token = object.access_token ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseGetFollowedUsersResponse(): GetFollowedUsersResponse {
  return { followed: [] };
}

export const GetFollowedUsersResponse: MessageFns<GetFollowedUsersResponse> = {
  encode(message: GetFollowedUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.followed) {
      UserBaseInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFollowedUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFollowedUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.followed.push(UserBaseInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFollowedUsersResponse {
    return {
      followed: globalThis.Array.isArray(object?.followed)
        ? object.followed.map((e: any) => UserBaseInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetFollowedUsersResponse): unknown {
    const obj: any = {};
    if (message.followed?.length) {
      obj.followed = message.followed.map((e) => UserBaseInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFollowedUsersResponse>, I>>(base?: I): GetFollowedUsersResponse {
    return GetFollowedUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFollowedUsersResponse>, I>>(object: I): GetFollowedUsersResponse {
    const message = createBaseGetFollowedUsersResponse();
    message.followed = object.followed?.map((e) => UserBaseInfo.fromPartial(e)) || [];
    return message;
  },
};

export type UserService = typeof UserService;
export const UserService = {
  signOut: {
    path: "/pb.User/SignOut",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignOutRequest) => Buffer.from(SignOutRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignOutRequest.decode(value),
    responseSerialize: (value: SignOutResponse) => Buffer.from(SignOutResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignOutResponse.decode(value),
  },
  getMe: {
    path: "/pb.User/GetMe",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMeRequest) => Buffer.from(GetMeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMeRequest.decode(value),
    responseSerialize: (value: GetMeResponse) => Buffer.from(GetMeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMeResponse.decode(value),
  },
  updateMe: {
    path: "/pb.User/UpdateMe",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateMeRequest) => Buffer.from(UpdateMeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateMeRequest.decode(value),
    responseSerialize: (value: UpdateMeResponse) => Buffer.from(UpdateMeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateMeResponse.decode(value),
  },
  getSession: {
    path: "/pb.User/GetSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSessionRequest) => Buffer.from(GetSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSessionRequest.decode(value),
    responseSerialize: (value: GetSessionResponse) => Buffer.from(GetSessionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetSessionResponse.decode(value),
  },
  getMyOverview: {
    path: "/pb.User/GetMyOverview",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMyOverviewRequest) => Buffer.from(GetMyOverviewRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMyOverviewRequest.decode(value),
    responseSerialize: (value: GetMyOverviewResponse) => Buffer.from(GetMyOverviewResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMyOverviewResponse.decode(value),
  },
  getMyPost: {
    path: "/pb.User/GetMyPost",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMyPostRequest) => Buffer.from(GetMyPostRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMyPostRequest.decode(value),
    responseSerialize: (value: GetMyPostResponse) => Buffer.from(GetMyPostResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMyPostResponse.decode(value),
  },
  followUser: {
    path: "/pb.User/FollowUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FollowUserRequest) => Buffer.from(FollowUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FollowUserRequest.decode(value),
    responseSerialize: (value: FollowUserResponse) => Buffer.from(FollowUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FollowUserResponse.decode(value),
  },
  unFollowUser: {
    path: "/pb.User/UnFollowUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UnFollowUserRequest) => Buffer.from(UnFollowUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UnFollowUserRequest.decode(value),
    responseSerialize: (value: UnFollowUserResponse) => Buffer.from(UnFollowUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UnFollowUserResponse.decode(value),
  },
  checkUserFollowed: {
    path: "/pb.User/CheckUserFollowed",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckUserFollowedRequest) => Buffer.from(CheckUserFollowedRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckUserFollowedRequest.decode(value),
    responseSerialize: (value: CheckUserFollowedResponse) =>
      Buffer.from(CheckUserFollowedResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckUserFollowedResponse.decode(value),
  },
  getFollowedUsers: {
    path: "/pb.User/GetFollowedUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFollowedUsersRequest) => Buffer.from(GetFollowedUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFollowedUsersRequest.decode(value),
    responseSerialize: (value: GetFollowedUsersResponse) =>
      Buffer.from(GetFollowedUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFollowedUsersResponse.decode(value),
  },
} as const;

export interface UserServer extends UntypedServiceImplementation {
  signOut: handleUnaryCall<SignOutRequest, SignOutResponse>;
  getMe: handleUnaryCall<GetMeRequest, GetMeResponse>;
  updateMe: handleUnaryCall<UpdateMeRequest, UpdateMeResponse>;
  getSession: handleUnaryCall<GetSessionRequest, GetSessionResponse>;
  getMyOverview: handleUnaryCall<GetMyOverviewRequest, GetMyOverviewResponse>;
  getMyPost: handleUnaryCall<GetMyPostRequest, GetMyPostResponse>;
  followUser: handleUnaryCall<FollowUserRequest, FollowUserResponse>;
  unFollowUser: handleUnaryCall<UnFollowUserRequest, UnFollowUserResponse>;
  checkUserFollowed: handleUnaryCall<CheckUserFollowedRequest, CheckUserFollowedResponse>;
  getFollowedUsers: handleUnaryCall<GetFollowedUsersRequest, GetFollowedUsersResponse>;
}

export interface UserClient extends Client {
  signOut(
    request: SignOutRequest,
    callback: (error: ServiceError | null, response: SignOutResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignOutRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignOutResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignOutRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignOutResponse) => void,
  ): ClientUnaryCall;
  getMe(
    request: GetMeRequest,
    callback: (error: ServiceError | null, response: GetMeResponse) => void,
  ): ClientUnaryCall;
  getMe(
    request: GetMeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetMeResponse) => void,
  ): ClientUnaryCall;
  getMe(
    request: GetMeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetMeResponse) => void,
  ): ClientUnaryCall;
  updateMe(
    request: UpdateMeRequest,
    callback: (error: ServiceError | null, response: UpdateMeResponse) => void,
  ): ClientUnaryCall;
  updateMe(
    request: UpdateMeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateMeResponse) => void,
  ): ClientUnaryCall;
  updateMe(
    request: UpdateMeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateMeResponse) => void,
  ): ClientUnaryCall;
  getSession(
    request: GetSessionRequest,
    callback: (error: ServiceError | null, response: GetSessionResponse) => void,
  ): ClientUnaryCall;
  getSession(
    request: GetSessionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetSessionResponse) => void,
  ): ClientUnaryCall;
  getSession(
    request: GetSessionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetSessionResponse) => void,
  ): ClientUnaryCall;
  getMyOverview(
    request: GetMyOverviewRequest,
    callback: (error: ServiceError | null, response: GetMyOverviewResponse) => void,
  ): ClientUnaryCall;
  getMyOverview(
    request: GetMyOverviewRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetMyOverviewResponse) => void,
  ): ClientUnaryCall;
  getMyOverview(
    request: GetMyOverviewRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetMyOverviewResponse) => void,
  ): ClientUnaryCall;
  getMyPost(
    request: GetMyPostRequest,
    callback: (error: ServiceError | null, response: GetMyPostResponse) => void,
  ): ClientUnaryCall;
  getMyPost(
    request: GetMyPostRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetMyPostResponse) => void,
  ): ClientUnaryCall;
  getMyPost(
    request: GetMyPostRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetMyPostResponse) => void,
  ): ClientUnaryCall;
  followUser(
    request: FollowUserRequest,
    callback: (error: ServiceError | null, response: FollowUserResponse) => void,
  ): ClientUnaryCall;
  followUser(
    request: FollowUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FollowUserResponse) => void,
  ): ClientUnaryCall;
  followUser(
    request: FollowUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FollowUserResponse) => void,
  ): ClientUnaryCall;
  unFollowUser(
    request: UnFollowUserRequest,
    callback: (error: ServiceError | null, response: UnFollowUserResponse) => void,
  ): ClientUnaryCall;
  unFollowUser(
    request: UnFollowUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UnFollowUserResponse) => void,
  ): ClientUnaryCall;
  unFollowUser(
    request: UnFollowUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UnFollowUserResponse) => void,
  ): ClientUnaryCall;
  checkUserFollowed(
    request: CheckUserFollowedRequest,
    callback: (error: ServiceError | null, response: CheckUserFollowedResponse) => void,
  ): ClientUnaryCall;
  checkUserFollowed(
    request: CheckUserFollowedRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckUserFollowedResponse) => void,
  ): ClientUnaryCall;
  checkUserFollowed(
    request: CheckUserFollowedRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckUserFollowedResponse) => void,
  ): ClientUnaryCall;
  getFollowedUsers(
    request: GetFollowedUsersRequest,
    callback: (error: ServiceError | null, response: GetFollowedUsersResponse) => void,
  ): ClientUnaryCall;
  getFollowedUsers(
    request: GetFollowedUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFollowedUsersResponse) => void,
  ): ClientUnaryCall;
  getFollowedUsers(
    request: GetFollowedUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFollowedUsersResponse) => void,
  ): ClientUnaryCall;
}

export const UserClient = makeGenericClientConstructor(UserService, "pb.User") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserClient;
  service: typeof UserService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
