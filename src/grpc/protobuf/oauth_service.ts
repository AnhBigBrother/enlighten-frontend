// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.1
// source: oauth_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "pb";

export interface OauthUserData {
  email: string;
  name: string;
  image: string;
}

export interface OauthGoogleRequest {
  access_token: string;
  token_type: string;
}

export interface OauthGoogleResponse {
  access_token: string;
  refresh_token: string;
  user: OauthUserData | undefined;
}

export interface OauthGithubRequest {
  access_token: string;
  token_type: string;
}

export interface OauthGithubResponse {
  access_token: string;
  refresh_token: string;
  user: OauthUserData | undefined;
}

export interface OauthMicrosoftRequest {
  access_token: string;
  token_type: string;
}

export interface OauthMicrosoftResponse {
  access_token: string;
  refresh_token: string;
  user: OauthUserData | undefined;
}

export interface OauthDiscordRequest {
  access_token: string;
  token_type: string;
}

export interface OauthDiscordResponse {
  access_token: string;
  refresh_token: string;
  user: OauthUserData | undefined;
}

function createBaseOauthUserData(): OauthUserData {
  return { email: "", name: "", image: "" };
}

export const OauthUserData: MessageFns<OauthUserData> = {
  encode(message: OauthUserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthUserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthUserData {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: OauthUserData): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthUserData>, I>>(base?: I): OauthUserData {
    return OauthUserData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthUserData>, I>>(object: I): OauthUserData {
    const message = createBaseOauthUserData();
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseOauthGoogleRequest(): OauthGoogleRequest {
  return { access_token: "", token_type: "" };
}

export const OauthGoogleRequest: MessageFns<OauthGoogleRequest> = {
  encode(message: OauthGoogleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.token_type !== "") {
      writer.uint32(18).string(message.token_type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthGoogleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthGoogleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token_type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthGoogleRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      token_type: isSet(object.token_type) ? globalThis.String(object.token_type) : "",
    };
  },

  toJSON(message: OauthGoogleRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.token_type !== "") {
      obj.token_type = message.token_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthGoogleRequest>, I>>(base?: I): OauthGoogleRequest {
    return OauthGoogleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthGoogleRequest>, I>>(object: I): OauthGoogleRequest {
    const message = createBaseOauthGoogleRequest();
    message.access_token = object.access_token ?? "";
    message.token_type = object.token_type ?? "";
    return message;
  },
};

function createBaseOauthGoogleResponse(): OauthGoogleResponse {
  return { access_token: "", refresh_token: "", user: undefined };
}

export const OauthGoogleResponse: MessageFns<OauthGoogleResponse> = {
  encode(message: OauthGoogleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    if (message.user !== undefined) {
      OauthUserData.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthGoogleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthGoogleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = OauthUserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthGoogleResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
      user: isSet(object.user) ? OauthUserData.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: OauthGoogleResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    if (message.user !== undefined) {
      obj.user = OauthUserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthGoogleResponse>, I>>(base?: I): OauthGoogleResponse {
    return OauthGoogleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthGoogleResponse>, I>>(object: I): OauthGoogleResponse {
    const message = createBaseOauthGoogleResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? OauthUserData.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseOauthGithubRequest(): OauthGithubRequest {
  return { access_token: "", token_type: "" };
}

export const OauthGithubRequest: MessageFns<OauthGithubRequest> = {
  encode(message: OauthGithubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.token_type !== "") {
      writer.uint32(18).string(message.token_type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthGithubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthGithubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token_type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthGithubRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      token_type: isSet(object.token_type) ? globalThis.String(object.token_type) : "",
    };
  },

  toJSON(message: OauthGithubRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.token_type !== "") {
      obj.token_type = message.token_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthGithubRequest>, I>>(base?: I): OauthGithubRequest {
    return OauthGithubRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthGithubRequest>, I>>(object: I): OauthGithubRequest {
    const message = createBaseOauthGithubRequest();
    message.access_token = object.access_token ?? "";
    message.token_type = object.token_type ?? "";
    return message;
  },
};

function createBaseOauthGithubResponse(): OauthGithubResponse {
  return { access_token: "", refresh_token: "", user: undefined };
}

export const OauthGithubResponse: MessageFns<OauthGithubResponse> = {
  encode(message: OauthGithubResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    if (message.user !== undefined) {
      OauthUserData.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthGithubResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthGithubResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = OauthUserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthGithubResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
      user: isSet(object.user) ? OauthUserData.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: OauthGithubResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    if (message.user !== undefined) {
      obj.user = OauthUserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthGithubResponse>, I>>(base?: I): OauthGithubResponse {
    return OauthGithubResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthGithubResponse>, I>>(object: I): OauthGithubResponse {
    const message = createBaseOauthGithubResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? OauthUserData.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseOauthMicrosoftRequest(): OauthMicrosoftRequest {
  return { access_token: "", token_type: "" };
}

export const OauthMicrosoftRequest: MessageFns<OauthMicrosoftRequest> = {
  encode(message: OauthMicrosoftRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.token_type !== "") {
      writer.uint32(18).string(message.token_type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthMicrosoftRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthMicrosoftRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token_type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthMicrosoftRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      token_type: isSet(object.token_type) ? globalThis.String(object.token_type) : "",
    };
  },

  toJSON(message: OauthMicrosoftRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.token_type !== "") {
      obj.token_type = message.token_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthMicrosoftRequest>, I>>(base?: I): OauthMicrosoftRequest {
    return OauthMicrosoftRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthMicrosoftRequest>, I>>(object: I): OauthMicrosoftRequest {
    const message = createBaseOauthMicrosoftRequest();
    message.access_token = object.access_token ?? "";
    message.token_type = object.token_type ?? "";
    return message;
  },
};

function createBaseOauthMicrosoftResponse(): OauthMicrosoftResponse {
  return { access_token: "", refresh_token: "", user: undefined };
}

export const OauthMicrosoftResponse: MessageFns<OauthMicrosoftResponse> = {
  encode(message: OauthMicrosoftResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    if (message.user !== undefined) {
      OauthUserData.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthMicrosoftResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthMicrosoftResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = OauthUserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthMicrosoftResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
      user: isSet(object.user) ? OauthUserData.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: OauthMicrosoftResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    if (message.user !== undefined) {
      obj.user = OauthUserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthMicrosoftResponse>, I>>(base?: I): OauthMicrosoftResponse {
    return OauthMicrosoftResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthMicrosoftResponse>, I>>(object: I): OauthMicrosoftResponse {
    const message = createBaseOauthMicrosoftResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? OauthUserData.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseOauthDiscordRequest(): OauthDiscordRequest {
  return { access_token: "", token_type: "" };
}

export const OauthDiscordRequest: MessageFns<OauthDiscordRequest> = {
  encode(message: OauthDiscordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.token_type !== "") {
      writer.uint32(18).string(message.token_type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthDiscordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthDiscordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token_type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthDiscordRequest {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      token_type: isSet(object.token_type) ? globalThis.String(object.token_type) : "",
    };
  },

  toJSON(message: OauthDiscordRequest): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.token_type !== "") {
      obj.token_type = message.token_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthDiscordRequest>, I>>(base?: I): OauthDiscordRequest {
    return OauthDiscordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthDiscordRequest>, I>>(object: I): OauthDiscordRequest {
    const message = createBaseOauthDiscordRequest();
    message.access_token = object.access_token ?? "";
    message.token_type = object.token_type ?? "";
    return message;
  },
};

function createBaseOauthDiscordResponse(): OauthDiscordResponse {
  return { access_token: "", refresh_token: "", user: undefined };
}

export const OauthDiscordResponse: MessageFns<OauthDiscordResponse> = {
  encode(message: OauthDiscordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_token !== "") {
      writer.uint32(10).string(message.access_token);
    }
    if (message.refresh_token !== "") {
      writer.uint32(18).string(message.refresh_token);
    }
    if (message.user !== undefined) {
      OauthUserData.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OauthDiscordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOauthDiscordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh_token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = OauthUserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OauthDiscordResponse {
    return {
      access_token: isSet(object.access_token) ? globalThis.String(object.access_token) : "",
      refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
      user: isSet(object.user) ? OauthUserData.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: OauthDiscordResponse): unknown {
    const obj: any = {};
    if (message.access_token !== "") {
      obj.access_token = message.access_token;
    }
    if (message.refresh_token !== "") {
      obj.refresh_token = message.refresh_token;
    }
    if (message.user !== undefined) {
      obj.user = OauthUserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OauthDiscordResponse>, I>>(base?: I): OauthDiscordResponse {
    return OauthDiscordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OauthDiscordResponse>, I>>(object: I): OauthDiscordResponse {
    const message = createBaseOauthDiscordResponse();
    message.access_token = object.access_token ?? "";
    message.refresh_token = object.refresh_token ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? OauthUserData.fromPartial(object.user)
      : undefined;
    return message;
  },
};

export type OauthService = typeof OauthService;
export const OauthService = {
  oauthGoogle: {
    path: "/pb.Oauth/OauthGoogle",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OauthGoogleRequest) => Buffer.from(OauthGoogleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OauthGoogleRequest.decode(value),
    responseSerialize: (value: OauthGoogleResponse) => Buffer.from(OauthGoogleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OauthGoogleResponse.decode(value),
  },
  oauthGithub: {
    path: "/pb.Oauth/OauthGithub",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OauthGithubRequest) => Buffer.from(OauthGithubRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OauthGithubRequest.decode(value),
    responseSerialize: (value: OauthGithubResponse) => Buffer.from(OauthGithubResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OauthGithubResponse.decode(value),
  },
  oauthMicrosoft: {
    path: "/pb.Oauth/OauthMicrosoft",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OauthMicrosoftRequest) => Buffer.from(OauthMicrosoftRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OauthMicrosoftRequest.decode(value),
    responseSerialize: (value: OauthMicrosoftResponse) => Buffer.from(OauthMicrosoftResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OauthMicrosoftResponse.decode(value),
  },
  oauthDiscord: {
    path: "/pb.Oauth/OauthDiscord",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OauthDiscordRequest) => Buffer.from(OauthDiscordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OauthDiscordRequest.decode(value),
    responseSerialize: (value: OauthDiscordResponse) => Buffer.from(OauthDiscordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OauthDiscordResponse.decode(value),
  },
} as const;

export interface OauthServer extends UntypedServiceImplementation {
  oauthGoogle: handleUnaryCall<OauthGoogleRequest, OauthGoogleResponse>;
  oauthGithub: handleUnaryCall<OauthGithubRequest, OauthGithubResponse>;
  oauthMicrosoft: handleUnaryCall<OauthMicrosoftRequest, OauthMicrosoftResponse>;
  oauthDiscord: handleUnaryCall<OauthDiscordRequest, OauthDiscordResponse>;
}

export interface OauthClient extends Client {
  oauthGoogle(
    request: OauthGoogleRequest,
    callback: (error: ServiceError | null, response: OauthGoogleResponse) => void,
  ): ClientUnaryCall;
  oauthGoogle(
    request: OauthGoogleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OauthGoogleResponse) => void,
  ): ClientUnaryCall;
  oauthGoogle(
    request: OauthGoogleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OauthGoogleResponse) => void,
  ): ClientUnaryCall;
  oauthGithub(
    request: OauthGithubRequest,
    callback: (error: ServiceError | null, response: OauthGithubResponse) => void,
  ): ClientUnaryCall;
  oauthGithub(
    request: OauthGithubRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OauthGithubResponse) => void,
  ): ClientUnaryCall;
  oauthGithub(
    request: OauthGithubRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OauthGithubResponse) => void,
  ): ClientUnaryCall;
  oauthMicrosoft(
    request: OauthMicrosoftRequest,
    callback: (error: ServiceError | null, response: OauthMicrosoftResponse) => void,
  ): ClientUnaryCall;
  oauthMicrosoft(
    request: OauthMicrosoftRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OauthMicrosoftResponse) => void,
  ): ClientUnaryCall;
  oauthMicrosoft(
    request: OauthMicrosoftRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OauthMicrosoftResponse) => void,
  ): ClientUnaryCall;
  oauthDiscord(
    request: OauthDiscordRequest,
    callback: (error: ServiceError | null, response: OauthDiscordResponse) => void,
  ): ClientUnaryCall;
  oauthDiscord(
    request: OauthDiscordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OauthDiscordResponse) => void,
  ): ClientUnaryCall;
  oauthDiscord(
    request: OauthDiscordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OauthDiscordResponse) => void,
  ): ClientUnaryCall;
}

export const OauthClient = makeGenericClientConstructor(OauthService, "pb.Oauth") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OauthClient;
  service: typeof OauthService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
